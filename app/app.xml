This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
Arch.txt
PRD.txt
proto/agent-manage.html
proto/call-lobby.html
proto/chat-history.html
proto/chat.html
proto/create-agent.html
proto/create-meet.html
proto/dashboard.html
proto/live call session/app.js
proto/live call session/index.html
proto/live call session/style.css
proto/meet-manage.html
proto/modal-template.html
proto/post-summary.html
proto/styles.css
proto/upgrade.html
userflow-V1.txt
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="Arch.txt">
# Shikshak Teaching Platform — Detailed Architecture
Date: 2025-08-29
Author: Copilot (@jxlee007)

Overview
- Purpose: a production-ready, extensible architecture for a teaching-first platform (Shikshak) with an integrated multimodal AI co‑host (Soch). Designed for web + mobile, synchronous sessions (audio/video/screen-share), persistent classrooms/resources, and retrieval‑augmented multimodal AI (text, speech, vision, TTS).
- Goals: low-latency interactive AI replies in live sessions, secure consent-first processing of media, scalable SFU-based realtime, and an asynchronous ingestion/RAG stack for grounded answers.

What I built here: a single-source architecture document that maps components, data flows, APIs, deployment pattern, operational controls, security/privacy rules, scaling recommendations, and an incremental prototype path.

1) System components (high level)
- Frontend
  - Web client (React) — full feature set (session UI, screen-share, chat, overlays)
  - Mobile client (React Native + Expo) — join sessions, audio/video, limited screen-share where supported
- Realtime layer
  - Signaling service (Auth + session tokens)
  - SFU (LiveKit recommended managed or mediasoup/Jitsi self-hosted)
- Backend API layer
  - API Gateway (auth, RBAC, rate limiting)
  - App services (Node/Express or NestJS): classes, users, assignments, resources, sessions
- AI Orchestration & Workers
  - Ingest Worker(s) — document parsing, OCR, chunking, embedding
  - RAG Worker — performs retrieval + prompt assembly
  - Real-time AI Worker(s) — streaming STT ingestion, sampled frame analysis, quick-answer pipeline, TTS generation
- Storage & DB
  - Primary DB (Postgres or AppWrite) for relational data (users, classes, assignments)
  - Object storage (S3-compatible) for files, screen captures, TTS blobs
  - Vector DB (Pinecone / Faiss / Milvus) for embeddings
- Third-party AI endpoints
  - Soch endpoints (Chat Completions, STT: Saaras/Saarika, TTS: Bulbul, Transliteration etc.)
- Observability & Ops
  - Metrics (Prometheus), tracing (Jaeger), logs (ELK/Cloud provider), usage billing dashboard
- Security & Compliance
  - Key management, encryption, consent/audit logs, DLP and content moderation

2) Deployment topology (recommended)
- Kubernetes cluster (GKE/EKS/AKS) for core APIs, AI orchestrator, workers, vector DB (if self-hosted), and ingestion services.
- Managed SFU (LiveKit Cloud) or self-hosted SFU on k8s for media.
- Serverless functions (AWS Lambda/GCP Cloud Functions) for lightweight hooks (e.g., webhook ingestion, thumbnailing).
- CDN in front of static assets and TTS/audio blobs.
- VPC with private subnets for sensitive workloads (embedding store, model workers if self-hosted).

3) Session sequence (detailed)
1. Teacher creates session via POST /api/sessions → backend issues sessionId and join tokens (JWT with role & TTL). (Auth via AppWrite or internal OAuth)
2. Teacher starts SFU room (managed or self-hosted); clients join via signaling to SFU.
3. Teacher toggles "Enable AI co-host" → backend records aiEnabled flag; classroom members are presented consent modal.
4. Consent: students either opt-in or are excluded from AI processing. Consent is logged (AuditLog).
5. Client-side: browser captures audio/video and screen (getUserMedia/getDisplayMedia). Live audio goes to SFU. Client also samples frames (1–2 fps or on change) and sends to /api/ingest/frame with session token.
6. STT: either client streams audio to STT endpoint (Soch) directly (if allowed) or server-side receives mixed audio stream from SFU to the Real-time AI Worker via WebRTC-in or gRPC streaming.
7. Real-time AI Worker receives transcript chunks + sampled frames + recent chat → quick RAG lookup if needed → produces short answer + citations → TTS blob created and stored → Worker posts message to session chat and/or bot participant via SFU data channel. Clients play TTS respecting mute settings.
8. Longer RAG answers executed asynchronously; user sees progress indicator; full expanded answers saved as resources (if consented).

4) Data flows & payloads (examples)
- Frame ingest: POST /api/ingest/frame
  - { sessionId, userId, timestamp, frameUrl (pre-signed upload), meta: { regionHash, changeHash } }
- Quick answer request (internal):
  - { sessionId, transcriptSnippet, topKContext[], userLocale }
- RAG retrieval query:
  - embedding(query) → vectorDB.query(k=10) → return docs/snippets with anchors
- AI response:
  - { text, sources: [{resourceId, anchor}], confidence, ttsUrl }

5) Document ingestion pipeline
- Upload → Queue (Kafka/Rabbit) → Parser (PDF/text/slide/video) → OCR frames for images/slides → Chunker (overlap, chunk size) → Embedder → Upsert to Vector DB → Mark resource.ingestStatus.
- Orchestrate via workflow engine (Temporal or managed Step Functions).

6) STT / TTS / Model orchestration patterns
- Two-mode STT:
  - Low-latency mode (client-side): client streams to Soch STT directly and forwards transcripts to backend (reduces server cost).
  - Central mode: server-side STT via AI worker (needed for central transcription and auditing).
- TTS: generate audio using Bulbul on worker; store blob in S3; serve pre-signed URL to clients.
- Prompt engineering:
  - Meta prompts and templates stored in config, RAG few-shot prompts composed server-side.

7) Scalability & latency strategies
- SFU autoscale for peak sessions; use managed LiveKit to reduce operational overhead.
- Quick-answer Worker pool autoscaled by queue length and per-session concurrency.
- Use frame sampling, delta-frame detection, and on-demand frame capture to limit ML costs.
- Cache recent embeddings and RAG hits per session to avoid repeated retrieval.
- Fallbacks: if Soch model quota exceeded, use a lightweight local model or canned responses with “degraded” messaging.

8) Security, privacy & compliance controls
- Consent-first: AI never processes audio/video without per-session teacher enable + per-user opt-in.
- Ephemeral processing: default processing in-memory; persist only transcripts/notes with explicit teacher consent.
- Encryption: TLS everywhere; S3 encryption; DB encryption at rest.
- Audit trails: every AI decision, frame upload, and transcript chunk logged for compliance.
- Access control: RBAC enforced at API gateway and object storage; pre-signed URLs with limited TTL for media.
- Moderation: content filter on AI outputs (deny lists, toxicity checks), teacher override path.

9) Observability & cost controls
- Track per-session model usage (tokens, STT seconds, embedding calls), per-class monthly quotas.
- Cost dashboard with alerts and auto-disable AI per-class when budget exhausted.
- Metrics: session join/leave, aiEnabled ratio, median AI latency, errors, transcripts saved.

10) Data model highlights (for engineering)
- Session: {id, classId, startedAt, endedAt, aiEnabled, ingestConsent, tokensUsed}
- Resource: {id, classId, uploaderId, url, type, ingestStatus}
- EmbeddingDocument: {id, resourceId, snippet, vectorId, anchor}
- TranscriptSegment: {sessionId, speakerId, start, end, text, confidence}
- AuditLog: {actorId, action, target, meta, timestamp}

11) API & integration recommendations (next step: OpenAPI)
- /api/sessions (create/join/end)
- /api/ingest/frame (frame uploads)
- /api/ai/quick-answer (internal)
- /api/resources (upload/status)
- /api/consent (log opt-in/opt-out)

12) Infra & operational choices (recommended)
- Live prototype: LiveKit managed + Soch cloud endpoints + Pinecone (managed) + AppWrite for auth
- Production: k8s cluster for core, managed vector DB and managed SFU for simplicity; self-hosted only if strict cost or data locality requires it.
- CI/CD: GitHub Actions to build containers, run tests, and deploy Helm charts.

13) Risks & mitigations
- Privacy risk: enforce opt-in, ephemeral defaults, and strong UX consent.
- Cost risk: implement quotas, sample frames, and lightweight fallbacks.
- Latency risk: prioritize client STT + caching + small models for short replies.

Acceptance criteria for architecture
- SFU + signaling deployed and able to host 10 concurrent sessions with 10 participants each.
- AI worker can accept transcript + one sampled frame and return TTS answer <2s median in quick‑answer mode.
- Document ingestion produces searchable vector index and returns citations in queries.
- Consent UI implemented; transcript persistence requires explicit teacher consent.

What's next (I converted your repo snapshot intent into this architecture). I'll produce any of the following immediately on your request: an OpenAPI spec for session/ingest/ai endpoints, an executable prototype plan wiring LiveKit + a minimal AI worker (command payloads and example payloads), or a Helm chart + k8s manifest scaffold for the core services. Pick one and I will produce it now.
</file>

<file path="PRD.txt">
# Product Requirements Document (PRD)
Shikshak Teaching Platform — Soch-integrated Multimodal Teaching Experience
Date: 2025-08-29
Author: Copilot (@jxlee007)

## 1. Executive Summary
Shikshak is a teaching-first platform combining class management (assignments, grading, resources) and persistent chat channels with an always-available multimodal AI co‑host (Soch) that participates in live sessions. The platform aims to feel like "having a friend in a Discord-style call who sees your screen, hears you, and helps in real time" while preserving teacher control, student privacy, and pedagogical integrity.

Primary outcome: deliver an MVP where teachers host sessions, share screens and resources, students interact in chat/voice/video, and an AI co‑host provides real-time multimodal assistance (STT, vision-based context, short answers + TTS, and citation-backed RAG answers).

## 2. Objectives & Success Metrics
Objectives
- Provide low-friction classroom creation and participation (web + mobile)
- Enable synchronous collaboration (text chat + audio/video + screen-share)
- Provide an AI co-host that enhances learning with accurate, cited answers and multimodal understanding
- Give teachers tools for content creation and review, plus privacy and moderation control

Success metrics (90-day targets)
- DAU/MAU for pilot: 200/1,000 users
- Session AI engagement: 40% of sessions enable AI co-host on request
- Answer correctness proxy: Teachers mark 80% of AI answers as helpful or correct in sample audits
- Latency for quick AI replies: median <= 1.5s (using sampled transcript+frames + lightweight model)
- Cost per session (compute + vector DB): within target budget threshold (configurable)

## 3. User Personas
- Teacher Tania: creates classes, uploads lessons, runs live sessions, grades assignments, needs control over AI behavior.
- Student Sam: attends classes, asks questions via voice/text, expects fast helpful answers with context.
- TA Alex: helps moderate chats, grades assignments, assists teachers.
- Admin Priya: manages platform policies, quotas, and usage analytics.

## 4. Key Use Cases & User Flows
1. Class & Session Setup
   - Teacher creates class, invites students via code/link.
   - Teacher schedules live sessions or starts ad-hoc "Meet" sessions.
2. Live Session (core flow)
   - Participants join via invite link. Teacher shares screen/tab or camera.
   - Teacher invites AI co-host for the session (per-session opt-in).
   - AI listens (STT), samples screen frames (vision), and watches chat. Students can voice/text questions directed at AI.
   - AI replies via TTS + text with short summary + "Read more" and citations.
   - Teacher can approve/annotate AI overlays.
3. Resource & Assignment Workflows
   - Teacher uploads materials (PDF, video, slides). Ingestion pipeline chunks + indexes materials for RAG.
   - Teacher requests AI to auto-generate quizzes or lesson summaries.
4. Post-session artifacts
   - Optional transcript, highlight clips, and AI-generated notes stored to class resources (consent required).

## 5. MVP Feature Set (Must-have)
- Auth & roles: Teacher, Student, TA, Admin (email + OAuth optional)
- Class creation/joining, roster management
- Resource library: upload (PDF, doc), simple storage (S3/AppWrite)
- Basic assignment creation & submission
- Per-class persistent chat channels + direct messages
- Live sessions with audio + screen-share (WebRTC + SFU)
- Client-side sampled frame capture + secure ingest API
- STT for speech-to-text (live captions)
- AI co-host (short-answer pipeline): transcripts + sampled frames → quick answer + TTS
- Document ingestion + vector store + RAG for citation-backed answers
- Session consent & privacy UI (per-session opt-in + per-user opt-out)
- Teacher moderation controls and reporting

## 6. Stretch Features (Phase 2+)
- Full overlay/annotation canvas where AI can draw/highlight on shared content
- Real-time object/scene recognition for diagrams/slides
- Adaptive learning paths and fine-tuning with opt-in anonymized data
- Live video breakout rooms with AI moderation
- Mobile screen-sharing where supported; native clients for iOS/Android with WebRTC

## 7. Functional Requirements (detailed)
7.1 Classroom & User Management
- Teachers create classes with metadata (title, code, description, schedule).
- Teachers can invite students (code/link), view roster, and assign roles (TA).
- Role-based access control for resources, sessions, and artifacts.

7.2 Live Sessions
- Sessions are rooms (unique IDs) managed by backend signaling.
- Web clients must support getUserMedia and getDisplayMedia for camera + screen-share.
- SFU (e.g., LiveKit, Jitsi, mediasoup) handles multi-party media routing.
- Session lifecycle APIs: create, join, leave, mute, end.
- Session tokens with TTL and role-based permissions.

7.3 AI Co-host (Soch)
- Activation: Teacher toggles AI for a session; per-user consent UI appears for students.
- Input sources: live STT transcripts, sampled screen frames, chat messages, class resource retrieval.
- Response formats:
  - Short: 1–2 sentence spoken reply (TTS) + inline chat text
  - Expanded: "Read more" full-text reply with citations and timestamps
  - Annotation commands: highlight resource region or push note to shared canvas (MVP minimal)
- Grounding: All answers that rely on class resources must include at least one citation (resource title + timestamp/anchor).
- Confidence & meta: AI replies include a confidence indicator and an "I may be wrong" disclaimer when not grounded.

7.4 Document Ingestion & RAG
- Files uploaded to class resources are parsed, OCRed (if needed), chunked, embedded, and stored in vector DB.
- Embedding pipeline runs asynchronously; ingestion status surfaced in UI.
- RAG worker supports retrieving top-K documents/snippets.

7.5 Transcription (STT) & Captions
- Live STT for session audio; display live captions in UI.
- STT must support language detection and fallback to alternative supported languages via Soch text APIs.

7.6 TTS
- AI replies produce TTS audio blobs to be played by clients (Bulbul model by Soch).
- TTS playback is controllable (mute/unmute, volume).

7.7 Persistence & Artifacts
- Transcripts, highlights, and AI notes are persisted only with teacher consent.
- Stored artifacts are linked to class resource library with access controlled by roles.

## 8. Non-functional Requirements
- Latency:
  - Short-answer responsiveness: median <= 1.5s for quick replies.
  - Full RAG answers may take longer; show progress UI.
- Scalability:
  - SFU must support multi-party sessions with autoscaling.
  - AI workers should be horizontally scalable; rate-limiting enforced.
- Availability:
  - Target 99.5% availability for core services (auth, sessions, AI orchestration).
- Security:
  - TLS for all transports; AES-256 at rest for persisted artifacts.
  - Strong auth session handling and CSRF/XSS protections for web UI.

## 9. Architecture (high-level)
- Frontend:
  - React (web) + React Native (mobile), Expo for mobile prototyping.
  - WebRTC stack for real-time audio/video/screen.
- Backend:
  - API gateway (Node/Express or similar).
  - Signaling service (for WebRTC session negotiation).
  - SFU (managed LiveKit or self-hosted mediasoup/Jitsi).
  - AI Orchestration service: handles STT ingestion, sampled frame forwarding, model invocation, RAG orchestration, TTS generation.
  - Document ingestion pipeline: parser → chunker → embedder → vector DB (Pinecone/Faiss/Milvus).
  - Datastore: AppWrite (auth, user, collections) or Postgres for core structured data.
  - Storage: S3-compatible for files.
- Models / Integrations:
  - Soch text completion (chat), STT (Saaras/Saarika), TTS (Bulbul).
- Monitoring: Prometheus/Grafana or managed observability for latency, errors, cost.

## 10. Data Model (entities summary)
- User { id, name, email, role, profile, preferences }
- Class { id, title, code, description, teacherId, members[] }
- Session { id, classId, startedAt, endedAt, participants[], aiEnabled }
- Resource { id, classId, title, type, url, metadata, uploadedBy }
- Assignment { id, classId, title, dueDate, attachments, rubric }
- Submission { id, assignmentId, studentId, files, text, grade, feedback }
- Transcript { id, sessionId, text, createdAt, segments[] }
- EmbeddingDocument { id, resourceId, classId, snippet, vector, anchor }
- AuditLog { id, action, actorId, target, timestamp }

## 11. API Contract (high-level endpoints)
Note: These are high-level; produce OpenAPI spec as next step.
- POST /api/auth/signup
- POST /api/auth/login
- POST /api/classes → create class
- GET /api/classes/:id → get class details
- POST /api/classes/:id/resources → upload resource
- POST /api/sessions → create session (returns join token)
- POST /api/sessions/:id/join → exchange signaling token
- POST /api/ingest/upload-frame → secure endpoint for sampled frames
  - payload: { sessionId, userId, timestamp, image_base64_or_url, meta }
- POST /api/ai/quick-answer → { sessionId, transcriptSnippet, topKEmbeddings } → returns { text, ttsUrl, citations, confidence }
- GET /api/resources/:id/ingest-status
- POST /api/ai/generate-quiz → { resourceId, options } → returns quiz items
- POST /api/reports → user reporting of content

## 12. Privacy, Consent & Safety
- Default AI-off: AI co-host is disabled by default per session.
- Explicit consent: Teacher must enable AI for a session; students prompted to opt-in/out.
- Ephemeral processing: Where feasible, process audio/video in memory; discard after response unless consented to persist.
- Access control: persisted artifacts accessible only to class members; teacher can revoke.
- Moderation: content filter applied to AI outputs; "report" flow for users; teachers moderate chats.
- Data opt-in for model improvement: explicit opt-in required; anonymization + export controls.

## 13. Risk Analysis & Mitigations
- Privacy concerns: Provide transparent consent flow, ephemeral defaults, and audit logs.
- Cost explosion: Implement quotas, per-session caps, usage dashboards, and fallbacks to cheaper models.
- Latency: Use client-side pre-processing (frame sampling), cached embeddings, and lightweight local models for quick answers.
- Incorrect AI answers: enforce citation-first RAG pipeline, teacher override, and feedback loop for corrections.

## 14. Acceptance Criteria (MVP)
- Teachers can create/join classes and start live sessions with screen-share and audio.
- The AI co-host can be enabled by the teacher and receives transcripts + sampled frames to produce a short spoken text reply in-session.
- The AI provides at least one citation when answering questions that match uploaded resources.
- Students can opt out of AI listening for any session; consent banner appears when AI is enabled.
- Basic assignment creation/submission flows work end-to-end.
- Session transcripts (if persisted) are stored only with consent and are retrievable via class resources.

## 15. Rollout Plan & Timeline (8–10 weeks)
Sprint 0 — (Week 0) Spec, wireframes, infra evaluation (LiveKit vs Jitsi), data model (this PRD)
Sprint 1 — (Weeks 1–2) Auth, class model, basic UI, SFU + session creation/join
Sprint 2 — (Weeks 3–4) Screen-share + chat + STT captions (client STT integration option)
Sprint 3 — (Weeks 5–6) Document ingestion & vector DB; AI worker basic quick-answer (transcript+frames → short reply + TTS)
Sprint 4 — (Weeks 7–8) Teacher tools (resources, assignment flow), consent flows, basic moderation, polish
Pilot launch — Week 9: closed pilot with selected teachers/classes
Iteration & scale — Weeks 10+: overlays, deeper multimodal models, mobile WebRTC, analytics

## 16. Top-priority Engineering Backlog (initial)
1. Authentication & roles (email+OAuth)  
2. Class model CRUD + invite codes  
3. Session creation & join flow + SFU integration (LiveKit recommended)  
4. Screen-share + in-room chat + audio streaming  
5. Client sampled frame capture API + secure upload  
6. STT integration & live captions (client or server-side)  
7. Document ingestion pipeline → embeddings → Vector DB  
8. AI worker: quick-answer pipeline (transcript+frames → short answer + TTS)  
9. Consent UI & per-session AI toggles + opt-out controls  
10. Teacher dashboard minimal: upload resources, roster, launch session  
11. Persisted artifacts (consent-based): transcripts, highlights, notes  
12. Usage metering & model-cost dashboard

Estimate: MVP ~ 6–8 weeks with a small team (2 FE, 2 BE, 1 ML/Infra).

## 17. Open Questions / Decisions
- SFU choice: managed LiveKit vs self-managed mediasoup/Jitsi? (Managed reduces infra burden.)
- STT strategy: client-side streaming vs server-side? (Client reduces server bandwidth; server offers central processing)
- RAG retrieval budget: Pinecone or self-host Faiss/Milvus?
- Degree of persistence for session audio/video vs opt-in only.

## 18. Next Deliverables (recommended)
- Detailed OpenAPI spec for session, ingest, and AI endpoints.
- Wireframes: teacher dashboard, session UI (chat + captions + AI toggle), consent modal.
- Small prototype plan: LiveKit + simple AI worker that consumes sampled frames and STT to produce TTS replies.
- Security & privacy audit checklist for pilot.

## 19. Appendix: Example Session Sequence (technical)
1. Teacher creates session via POST /api/sessions → backend provisions SFU room + returns join tokens.
2. Teacher clicks "Enable AI co-host". Backend marks session.aiEnabled = true; notifications sent.
3. Students prompted to accept AI listening when joining; their consent stored.
4. Clients capture audio: browser records locally and streams to SFU; STT library produces transcript chunks (client or server).
5. Client samples screen frames (1–2 fps or on change) → POST /api/ingest/upload-frame with session token.
6. AI worker receives transcript chunk + frame refs → runs RAG retrieval (embedding context) → produces quick answer → TTS blob served.
7. AI's text + ttsUrl posted into session chat by bot user; TTS played automatically in clients (respecting mute settings).
8. Teacher can save transcript/notes to resources (consent and visibility checks apply).

---

End of PRD.
```
</file>

<file path="proto/agent-manage.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak Agent Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <!-- shared styles are loaded from /proto/styles.css -->
</head>
<body class="bg-background font-sans">
    <div class="flex flex-col h-screen">
        <!-- Navbar (same as previous) -->
        <header class="bg-white border-b border-gray-200">
            <div class="flex items-center justify-between px-4 py-3">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="md:hidden text-gray-500 focus:outline-none">
                        <i data-feather="menu"></i>
                    </button>
                    <div class="flex items-center">
                        <span class="text-xl font-bold text-primary">Shikshak</span>
                        <span class="ml-2 px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded">Pro ✨</span>
                    </div>
                </div>

                <div class="flex-1 max-w-md mx-4">
                    <div class="relative">
                        <input type="text" placeholder="Search..." class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 ease-out">
                        <i data-feather="search" class="w-5 h-5 absolute left-3 top-2.5 text-gray-400"></i>
                    </div>
                </div>

                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                            <i data-feather="bell"></i>
                        </button>
                        <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full animate-pulse">3</span>
                    </div>
                    <div class="relative">
                        <button class="flex items-center space-x-1 text-gray-700 hover:text-gray-900 focus:outline-none">
                            <span>John Doe</span>
                            <i data-feather="chevron-down"></i>
                        </button>
                    </div>
                    <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                        <i data-feather="settings"></i>
                    </button>
                </div>
            </div>
        </header>

        <div class="flex flex-1 overflow-hidden">
            <!-- Sidebar (same as previous) -->
            <aside id="sidebar" class="site-sidebar">
                <nav class="flex-1 py-4">
                    <a href="dashboard.html" class="sidebar-item">
                        <i data-feather="home" class="w-5 h-5 mr-3"></i>
                        Dashboard
                    </a>
                    <a href="meet-manage.html" class="sidebar-item">
                        <i data-feather="phone" class="w-5 h-5 mr-3"></i>
                        Meetings
                    </a>
                    <a href="agent-manage.html" class="sidebar-item active">
                        <i data-feather="cpu" class="w-5 h-5 mr-3"></i>
                        Agents
                    </a>
                    <a href="chat.html" class="sidebar-item">
                        <i data-feather="message-circle" class="w-5 h-5 mr-3"></i>
                        Chat
                    </a>
                    <a href="post-summary.html" class="sidebar-item">
                        <i data-feather="file-text" class="w-5 h-5 mr-3"></i>
                        Reports
                    </a>
                    <div class="px-4 py-6">
                        <a href="upgrade.html" class="flex items-center px-4 py-3 text-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100 card-hover">
                            <i data-feather="star" class="w-5 h-5 mr-3 text-yellow-500"></i>
                            <span class="font-medium">Upgrade Plan</span>
                        </a>
                    </div>
                </nav>
            </aside>

            <!-- Overlay for mobile sidebar -->
            <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-0 md:hidden hidden"></div>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-y-auto p-4 md:p-6">
                <div class="max-w-6xl mx-auto">
                    <!-- Page Header -->
                    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                        <h1 class="text-2xl font-bold text-gray-800 mb-4 md:mb-0">AI Agents</h1>
                        <button class="create-button">
                            <i data-feather="plus" class="w-4 h-4 mr-2"></i> Create Agent
                        </button>
                    </div>

                    <!-- Agent Grid View -->
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
                        <!-- Agent Card 1 - Hustle Coach -->
                        <div class="agent-card-hover">
                            <div class="p-5">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0 h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                                        <i data-feather="cpu" class="h-6 w-6 text-blue-500"></i>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">🤖 HUSTLE COACH</h3>
                                        <p class="mt-1 text-sm text-gray-600">"Direct, hyper-driven startup mentor who just raised seed $"</p>
                                    </div>
                                </div>
                                <div class="mt-4 flex items-center">
                                    <span class="relative-pulse-wrapper">
                                        <span class="status-indicator status-active-dot"></span>
                                    </span>
                                    <span class="text-xs font-medium status-active px-2 py-1 rounded-full">Active</span>
                                </div>
                            </div>
                            <div class="px-5 py-3 bg-gray-50 border-t border-gray-100">
                                <div class="card-actions">
                                    <button class="text-sm font-medium text-gray-700 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100 transition-colors duration-150">
                                        Edit
                                    </button>
                                    <button class="text-sm font-medium text-red-600 hover:text-red-800 px-3 py-1 rounded hover:bg-red-50 transition-colors duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Agent Card 2 - French Tutor -->
                        <div class="agent-card-hover">
                            <div class="p-5">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0 h-12 w-12 rounded-full bg-green-100 flex items-center justify-center mr-4">
                                        <i data-feather="globe" class="h-6 w-6 text-green-500"></i>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">🧠 FRENCH TUTOR</h3>
                                        <p class="mt-1 text-sm text-gray-600">"Patient, encouraging language teacher with native fluency"</p>
                                    </div>
                                </div>
                                <div class="mt-4 flex items-center">
                                    <span class="relative-pulse-wrapper">
                                        <span class="status-indicator status-active-dot"></span>
                                    </span>
                                    <span class="text-xs font-medium status-active px-2 py-1 rounded-full">Active</span>
                                </div>
                            </div>
                            <div class="px-5 py-3 bg-gray-50 border-t border-gray-100">
                                <div class="card-actions">
                                    <button class="text-sm font-medium text-gray-700 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100 transition-colors duration-150">
                                        Edit
                                    </button>
                                    <button class="text-sm font-medium text-red-600 hover:text-red-800 px-3 py-1 rounded hover:bg-red-50 transition-colors duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Agent Card 3 - Interview Coach -->
                        <div class="agent-card-hover">
                            <div class="p-5">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0 h-12 w-12 rounded-full bg-purple-100 flex items-center justify-center mr-4">
                                        <i data-feather="briefcase" class="h-6 w-6 text-purple-500"></i>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">💼 INTERVIEW COACH</h3>
                                        <p class="mt-1 text-sm text-gray-600">"Professional, constructive feedback for tech interviews"</p>
                                    </div>
                                </div>
                                <div class="mt-4 flex items-center">
                                    <span class="status-indicator status-inactive-dot"></span>
                                    <span class="text-xs font-medium status-inactive px-2 py-1 rounded-full">Inactive</span>
                                </div>
                            </div>
                            <div class="px-5 py-3 bg-gray-50 border-t border-gray-100">
                                <div class="card-actions">
                                    <button class="text-sm font-medium text-gray-700 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100 transition-colors duration-150">
                                        Edit
                                    </button>
                                    <button class="text-sm font-medium text-red-600 hover:text-red-800 px-3 py-1 rounded hover:bg-red-50 transition-colors duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Create New Agent Card -->
                        <div class="agent-card border-2 border-dashed border-gray-300 flex flex-col items-center justify-center p-8 text-center cursor-pointer hover:bg-gray-50 transition-colors duration-200">
                            <div class="flex-shrink-0 h-12 w-12 rounded-full bg-gray-100 flex items-center justify-center mb-3">
                                <i data-feather="plus-circle" class="h-6 w-6 text-gray-500"></i>
                            </div>
                            <h3 class="text-lg font-semibold text-gray-900">➕ CREATE NEW AGENT</h3>
                            <p class="mt-1 text-sm text-gray-600">Click to start building your custom AI agent</p>
                            <button class="mt-4 px-4 py-2 bg-primary text-white text-sm rounded-md hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors duration-150">
                                Create
                            </button>
                        </div>

                        <!-- Agent Card 4 - Creative Catalyst -->
                        <div class="agent-card-hover">
                            <div class="p-5">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0 h-12 w-12 rounded-full bg-yellow-100 flex items-center justify-center mr-4">
                                        <i data-feather="lightbulb" class="h-6 w-6 text-yellow-500"></i>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">🎨 CREATIVE CATALYST</h3>
                                        <p class="mt-1 text-sm text-gray-600">"Inspiring idea generator with unconventional approaches"</p>
                                    </div>
                                </div>
                                <div class="mt-4 flex items-center">
                                    <span class="relative-pulse-wrapper">
                                        <span class="status-indicator status-active-dot"></span>
                                    </span>
                                    <span class="text-xs font-medium status-active px-2 py-1 rounded-full">Active</span>
                                </div>
                            </div>
                            <div class="px-5 py-3 bg-gray-50 border-t border-gray-100">
                                <div class="card-actions">
                                    <button class="text-sm font-medium text-gray-700 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100 transition-colors duration-150">
                                        Edit
                                    </button>
                                    <button class="text-sm font-medium text-red-600 hover:text-red-800 px-3 py-1 rounded hover:bg-red-50 transition-colors duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Agent Card 5 - Data Analyst -->
                        <div class="agent-card-hover">
                            <div class="p-5">
                                <div class="flex items-start">
                                    <div class="flex-shrink-0 h-12 w-12 rounded-full bg-indigo-100 flex items-center justify-center mr-4">
                                        <i data-feather="bar-chart-2" class="h-6 w-6 text-indigo-500"></i>
                                    </div>
                                    <div>
                                        <h3 class="text-lg font-semibold text-gray-900">📊 DATA ANALYST</h3>
                                        <p class="mt-1 text-sm text-gray-600">"Analytical mind with expertise in statistics and insights"</p>
                                    </div>
                                </div>
                                <div class="mt-4 flex items-center">
                                    <span class="relative-pulse-wrapper">
                                        <span class="status-indicator status-active-dot"></span>
                                    </span>
                                    <span class="text-xs font-medium status-active px-2 py-1 rounded-full">Active</span>
                                </div>
                            </div>
                            <div class="px-5 py-3 bg-gray-50 border-t border-gray-100">
                                <div class="card-actions">
                                    <button class="text-sm font-medium text-gray-700 hover:text-gray-900 px-3 py-1 rounded hover:bg-gray-100 transition-colors duration-150">
                                        Edit
                                    </button>
                                    <button class="text-sm font-medium text-red-600 hover:text-red-800 px-3 py-1 rounded hover:bg-red-50 transition-colors duration-150">
                                        Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        // Simple JavaScript for sidebar toggle on mobile (same as previous)
        document.addEventListener('DOMContentLoaded', function () {
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');

            if (sidebarToggle && sidebar && overlay) {
                sidebarToggle.addEventListener('click', function () {
                    sidebar.classList.toggle('-translate-x-full');
                    overlay.classList.toggle('hidden');
                });

                overlay.addEventListener('click', function () {
                    sidebar.classList.add('-translate-x-full');
                    overlay.classList.add('hidden');
                });
            }
        });
    </script>
</body>
</html>
</file>

<file path="proto/call-lobby.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Video Call Lobby</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <!-- Fallback plain CSS (replaces Tailwind-processed block).
         This ensures component styles render even if the Tailwind CDN or its JIT processor
         is unavailable (offline or blocked). The original block relied on @apply/@layer.
    -->
    <style>
        /* Camera Preview */
        .camera-preview-container {
            background-color: #1f2937; /* tailwind bg-gray-800 */
            border-radius: 0.5rem;
            overflow: hidden;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            aspect-ratio: 16 / 9;
            color: #9ca3af; /* text-gray-400 */
        }
        .camera-placeholder { color: #9ca3af; }

        /* Device Toggle Buttons */
        .device-btn {
            display: inline-flex;
            align-items: center;
            padding: 0.5rem 1rem; /* py-2 px-4 */
            border-radius: 0.375rem;
            background-color: #374151; /* bg-gray-700 */
            color: #fff;
            cursor: pointer;
            transition: background-color 0.2s ease, box-shadow 0.2s ease;
        }
        .device-btn:hover { background-color: #4b5563; } /* bg-gray-600 */
        .device-btn.muted { background-color: #ef4444; } /* red-500 */

        /* Agent Avatar */
        .agent-avatar {
            height: 4rem; /* h-16 */
            width: 4rem;  /* w-16 */
            border-radius: 9999px;
            background-color: #dbeafe; /* bg-blue-100 */
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem; /* text-2xl */
            animation: breathe 4s ease-in-out infinite;
        }
        @keyframes breathe { 0%,100%{transform:scale(1);}50%{transform:scale(1.05);} }

        /* Connection Quality Bar */
        .quality-bar { height: 0.5rem; border-radius: 9999px; background-color: #e5e7eb; overflow: hidden; }
        .quality-fill { height: 100%; border-radius: 9999px; }
        .quality-excellent { background-color: #10b981; width: 80%; }
        .quality-good { background-color: #f59e0b; width: 60%; }
        .quality-poor { background-color: #ef4444; width: 20%; }

        /* Join Button */
        .join-btn {
            padding: 0.75rem 1.5rem; /* py-3 px-6 */
            background-color: var(--primary);
            color: #fff;
            border-radius: 0.75rem;
            font-weight: 600;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: all 0.25s ease-in-out;
        }
        .join-btn.pulse { animation: pulse 2s infinite; }
        @keyframes pulse { 0%,100%{box-shadow:0 0 0 0 rgba(67,97,238,0.4);}50%{box-shadow:0 0 0 10px rgba(67,97,238,0);} }

        /* Permission Prompt Modal */
        .permission-modal { position: fixed; inset: 0; background: rgba(0,0,0,0.7); display: flex; align-items: center; justify-content: center; padding: 1rem; z-index: 50; visibility: visible; opacity: 1; }
        .permission-modal.hidden { display: none; }
        .permission-content { background: #fff; border-radius: 0.75rem; padding: 1.5rem; max-width: 28rem; width: 100%; transform: scale(.95); opacity: 0; transition: all 0.25s ease-out; }
        .permission-modal.active .permission-content { transform: scale(1); opacity: 1; }

        /* Loading Spinner */
        .loading-spinner { width: 1.25rem; height: 1.25rem; display: inline-block; color: currentColor; animation: spin 1s linear infinite; }
        @keyframes spin { to { transform: rotate(360deg); } }
    </style>
    <style>
        /* Minimal Tailwind-like utilities used by this page (fall back when Tailwind isn't available) */
        .hidden { display: none !important; }
        .flex { display: flex !important; }
        .flex-1 { flex: 1 1 0% !important; }
        .flex-col { flex-direction: column !important; }
        .items-center { align-items: center !important; }
        .justify-center { justify-content: center !important; }
        .justify-between { justify-content: space-between !important; }
        .space-x-2 > * + * { margin-left: 0.5rem; }
        .space-x-4 > * + * { margin-left: 1rem; }
        .space-y-6 > * + * { margin-top: 1.5rem; }
        .gap-6 { gap: 1.5rem; }
        .grid { display: grid !important; }
        .grid-cols-1 { grid-template-columns: 1fr; }
        @media (min-width: 1024px) { .lg\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0,1fr)); } }
        .max-w-6xl { max-width: 72rem; }
        .mx-auto { margin-left: auto; margin-right: auto; }

        /* Spacing */
        .p-4 { padding: 1rem !important; }
        .p-6 { padding: 1.5rem !important; }
        @media (min-width: 768px) { .md\:p-6 { padding: 1.5rem !important; } }
        .px-4 { padding-left: 1rem !important; padding-right: 1rem !important; }
        .py-3 { padding-top: .75rem !important; padding-bottom: .75rem !important; }
        .mt-2 { margin-top: .5rem !important; }
        .mr-2 { margin-right: .5rem !important; }
        .mr-3 { margin-right: .75rem !important; }
        .mr-4 { margin-right: 1rem !important; }
        .ml-2 { margin-left: .5rem !important; }
        .mb-3 { margin-bottom: .75rem !important; }

        /* Sizing */
        .w-12 { width: 3rem !important; }
        .h-12 { height: 3rem !important; }
        .w-5 { width: 1.25rem !important; }
        .h-5 { height: 1.25rem !important; }
        .w-4 { width: 1rem !important; }
        .h-4 { height: 1rem !important; }

        /* Typography & color helpers (small subset) */
        .text-sm { font-size: .875rem; }
        .text-lg { font-size: 1.125rem; }
        .font-medium { font-weight: 500; }
        .font-semibold { font-weight: 600; }
        .text-gray-900 { color: #111827; }
        .text-gray-800 { color: #1f2937; }
        .text-gray-600 { color: #4b5563; }
        .text-gray-500 { color: #6b7280; }
        .bg-white { background-color: #ffffff !important; }
        .bg-gray-50 { background-color: #f9fafb; }
        .border-gray-200 { border-color: #e5e7eb; }
        .rounded-lg { border-radius: 0.5rem; }
        .rounded-md { border-radius: 0.375rem; }
        .shadow-sm { box-shadow: 0 1px 3px rgba(0,0,0,0.08); }

        /* Utility toggles used by scripts */
        .hidden { display: none !important; }
        .z-40 { z-index: 40; }
        .fixed { position: fixed; }
        .inset-0 { top: 0; right: 0; bottom: 0; left: 0; }
    </style>
</head>
<body class="bg-background font-sans min-h-screen flex items-center justify-center p-4">
    <!-- Demo Button to trigger lobby -->
    <button id="open-lobby-btn" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
        Open Video Call Lobby
    </button>

    <!-- Video Call Lobby -->
    <div id="video-call-lobby" class="fixed inset-0 z-40 bg-white flex flex-col hidden">
        <!-- Header -->
        <header class="bg-white border-b border-gray-200 px-4 py-3 flex justify-between items-center">
            <h1 class="text-lg font-semibold text-gray-900">Startup Coaching Session</h1>
            <div class="flex items-center space-x-2">
                <button class="p-2 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary">
                    <i data-feather="settings"></i>
                </button>
                <button id="close-lobby-btn" class="p-2 rounded-md text-gray-500 hover:text-gray-700 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary">
                    <i data-feather="x"></i>
                </button>
            </div>
        </header>

        <div class="flex-1 overflow-y-auto p-4 md:p-6">
            <div class="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Left Column: Camera Preview & Agent Preview -->
                <div class="space-y-6">
                    <!-- Camera Preview -->
                    <div class="bg-white rounded-lg shadow-sm p-4">
                        <h2 class="text-base font-medium text-gray-800 mb-3">Camera Preview</h2>
                        <div class="camera-preview-container">
                            <!-- In a real app, this would be a <video> element -->
                            <div class="camera-placeholder">
                                <i data-feather="video" class="w-12 h-12"></i>
                                <p class="mt-2 text-sm">Camera Preview</p>
                            </div>
                            <!-- Simulated video feed -->
                            <!-- <video id="local-video" autoplay muted class="w-full h-full object-cover"></video> -->
                        </div>
                        <div class="flex justify-center space-x-4 mt-4">
                            <button id="toggle-mic" class="device-btn">
                                <i data-feather="mic" class="w-4 h-4 mr-2"></i> Mute
                            </button>
                            <button id="toggle-video" class="device-btn">
                                <i data-feather="video" class="w-4 h-4 mr-2"></i> Stop Video
                            </button>
                        </div>
                    </div>

                    <!-- Agent Preview -->
                    <div class="bg-white rounded-lg shadow-sm p-4">
                        <h2 class="text-base font-medium text-gray-800 mb-3">Agent Preview</h2>
                        <div class="flex items-start p-4 bg-gray-50 rounded-md">
                            <div class="agent-avatar flex-shrink-0 mr-4">
                                🤖
                            </div>
                            <div>
                                <h3 class="font-semibold text-gray-900">Hustle Coach</h3>
                                <p class="text-sm text-gray-600 mt-1">"Ready to disrupt and scale!"</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column: Setup Panel -->
                <div class="bg-white rounded-lg shadow-sm p-4">
                    <h2 class="text-base font-medium text-gray-800 mb-4">Setup Panel</h2>

                    <!-- Device Setup -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-700 mb-2">Device Setup</h3>
                        <div class="space-y-3">
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                                <div class="flex items-center">
                                    <i data-feather="video" class="w-5 h-5 text-gray-500 mr-3"></i>
                                    <span class="text-sm">Camera: MacBook Pro (Built-in)</span>
                                </div>
                                <div class="animate-spin h-4 w-4 text-gray-400">
                                    <svg class="loading-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </div>
                            </div>
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                                <div class="flex items-center">
                                    <i data-feather="mic" class="w-5 h-5 text-gray-500 mr-3"></i>
                                    <span class="text-sm">Mic: MacBook Pro (Built-in)</span>
                                </div>
                                <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">Connected</span>
                            </div>
                            <div class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                                <div class="flex items-center">
                                    <i data-feather="volume-2" class="w-5 h-5 text-gray-500 mr-3"></i>
                                    <span class="text-sm">Speaker: MacBook Pro (Built-in)</span>
                                </div>
                                <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">Connected</span>
                            </div>
                        </div>
                    </div>

                    <!-- Meeting Details -->
                    <div class="mb-6">
                        <h3 class="text-sm font-medium text-gray-700 mb-2">Meeting Details</h3>
                        <ul class="space-y-2 text-sm text-gray-600">
                            <li class="flex">
                                <span class="w-24 text-gray-500">Agent:</span>
                                <span>🤖 Hustle Coach</span>
                            </li>
                            <li class="flex">
                                <span class="w-24 text-gray-500">Duration:</span>
                                <span>No limit</span>
                            </li>
                            <li class="flex">
                                <span class="w-24 text-gray-500">Recording:</span>
                                <span class="flex items-center">
                                    <i data-feather="check-circle" class="w-4 h-4 text-green-500 mr-1"></i> Enabled
                                </span>
                            </li>
                            <li class="flex">
                                <span class="w-24 text-gray-500">Transcription:</span>
                                <span class="flex items-center">
                                    <i data-feather="check-circle" class="w-4 h-4 text-green-500 mr-1"></i> Enabled
                                </span>
                            </li>
                        </ul>
                    </div>

                    <!-- Connection Quality -->
                    <div>
                        <h3 class="text-sm font-medium text-gray-700 mb-2">Connection Quality</h3>
                        <div class="flex items-center p-3 bg-gray-50 rounded-md">
                            <div class="quality-bar flex-1 mr-3">
                                <div class="quality-fill quality-excellent"></div>
                            </div>
                            <span class="text-xs font-medium text-green-700">Excellent</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer with Join Button -->
        <footer class="bg-white border-t border-gray-200 px-4 py-4 flex justify-center">
            <button id="join-call-btn" class="join-btn pulse">
                Join Call
                <svg id="join-loading-spinner" class="loading-spinner ml-2 hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
            </button>
        </footer>
    </div>

    <!-- Permission Prompt Modal (Placeholder) -->
    <div id="permission-modal" class="permission-modal">
        <div class="permission-content">
            <h3 class="text-lg font-medium text-gray-900 mb-2">Allow Camera & Microphone Access</h3>
            <p class="text-sm text-gray-600 mb-4">Shikshak needs access to your camera and microphone to join the meeting.</p>
            <div class="flex justify-end space-x-3">
                <button id="deny-permission" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Deny
                </button>
                <button id="allow-permission" class="px-4 py-2 bg-primary text-white rounded-md text-sm font-medium hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                    Allow
                </button>
            </div>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
                const lobby = document.getElementById('video-call-lobby');
                const openLobbyBtn = document.getElementById('open-lobby-btn');
                const closeLobbyBtn = document.getElementById('close-lobby-btn');
                const joinCallBtn = document.getElementById('join-call-btn');
                const joinLoadingSpinner = document.getElementById('join-loading-spinner');
                const toggleMicBtn = document.getElementById('toggle-mic');
                const toggleVideoBtn = document.getElementById('toggle-video');

            let isMicMuted = false;
            let isVideoStopped = false;

            // Open lobby - replace modal permission flow with a simple alert
            openLobbyBtn.addEventListener('click', () => {
                // Use a simple alert to inform the user about permissions (no modal transform)
                alert('Shikshak needs access to your camera and microphone to join the meeting.\n\n(Preview and permission are simulated in this prototype)');
                // Open the lobby after acknowledging the alert
                lobby.classList.remove('hidden');
            });

            // Close lobby
            const closeLobby = () => {
                lobby.classList.add('hidden');
            };
            closeLobbyBtn.addEventListener('click', closeLobby);

            // Toggle Mic
            toggleMicBtn.addEventListener('click', function () {
                isMicMuted = !isMicMuted;
                if (isMicMuted) {
                    this.classList.add('muted');
                    this.innerHTML = '<i data-feather="mic-off" class="w-4 h-4 mr-2"></i> Unmute';
                } else {
                    this.classList.remove('muted');
                    this.innerHTML = '<i data-feather="mic" class="w-4 h-4 mr-2"></i> Mute';
                }
                feather.replace(); // Re-render icons
            });

            // Toggle Video
            toggleVideoBtn.addEventListener('click', function () {
                isVideoStopped = !isVideoStopped;
                if (isVideoStopped) {
                    this.classList.add('muted');
                    this.innerHTML = '<i data-feather="video-off" class="w-4 h-4 mr-2"></i> Start Video';
                } else {
                    this.classList.remove('muted');
                    this.innerHTML = '<i data-feather="video" class="w-4 h-4 mr-2"></i> Stop Video';
                }
                feather.replace(); // Re-render icons
            });

            // Join Call
            joinCallBtn.addEventListener('click', function () {
                this.disabled = true;
                this.classList.remove('pulse');
                joinLoadingSpinner.classList.remove('hidden');

                // Simulate joining process
                setTimeout(() => {
                    // In a real app, this would navigate to the live session page
                    alert("Joining call... (Simulated)");
                    closeLobby();
                    this.disabled = false;
                    this.classList.add('pulse');
                    joinLoadingSpinner.classList.add('hidden');
                }, 2000); // Simulate 2 second delay
            });

        });
    </script>
</body>
</html>
</file>

<file path="proto/chat-history.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Meeting Transcript</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                        user: '#10b981', // Green for user
                        agent: '#8b5cf6', // Purple for agent
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style type="text/tailwindcss">
        @layer components {
            /* Main Layout */
            .transcript-container {
                @apply flex flex-col h-screen bg-white;
            }

            /* Header */
            .transcript-header {
                @apply py-4 px-6 border-b border-gray-200 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3;
            }
            .header-title {
                @apply text-xl font-bold text-gray-900;
            }
            .header-controls {
                @apply flex items-center space-x-2;
            }
            .search-input {
                @apply w-full sm:w-64 px-3 py-1.5 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary text-sm;
            }
            .download-btn {
                @apply flex items-center px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary;
            }

            /* Search Results Bar */
            .search-results-bar {
                @apply py-2 px-6 bg-blue-50 border-b border-blue-100 flex flex-wrap items-center justify-between text-sm;
            }
            .search-info {
                @apply font-medium text-blue-800;
            }
            .jump-buttons {
                @apply flex flex-wrap gap-2 mt-1 sm:mt-0;
            }
            .jump-btn {
                @apply px-2 py-1 bg-white border border-blue-300 rounded text-blue-700 hover:bg-blue-100 focus:outline-none focus:ring-1 focus:ring-blue-500 text-xs;
            }
            .close-search-btn {
                @apply ml-2 p-1 text-blue-500 hover:text-blue-700 focus:outline-none;
            }

            /* Transcript Content Area */
            .transcript-content-area {
                @apply flex-1 overflow-y-auto p-6 relative;
            }
            .progress-bar-container {
                @apply absolute top-0 left-0 right-0 h-1 bg-gray-200 z-10;
            }
            .progress-bar {
                @apply h-full bg-primary transition-all duration-150 ease-out;
            }

            /* Transcript Entry */
            .transcript-entry {
                @apply mb-6 relative; /* Relative for potential highlight pulse */
            }
            .entry-header {
                @apply flex items-start mb-1;
            }
            .timestamp {
                @apply text-xs font-medium text-gray-500 mr-3 mt-1 cursor-pointer hover:underline flex-shrink-0;
            }
            .speaker-name {
                @apply font-semibold flex items-center;
            }
            .user-name {
                @apply text-user;
            }
            .agent-name {
                @apply text-agent;
            }
            .speaker-avatar {
                @apply flex-shrink-0 h-6 w-6 rounded-full flex items-center justify-center text-xs mr-2;
            }
            .user-avatar {
                @apply bg-green-100 text-green-800;
            }
            .agent-avatar {
                @apply bg-purple-100 text-purple-800;
            }
            .entry-text {
                @apply text-gray-700 ml-9; /* Match speaker name indent */
            }
            .highlight {
                @apply bg-yellow-200;
                animation: highlightFade 0.5s ease-out;
            }
            @keyframes highlightFade {
                from { background-color: #fef3c7; } /* Lighter yellow start */
                to { background-color: #fef9c3; } /* End at standard yellow */
            }
            .highlight-pulse {
                animation: pulseHighlight 1s ease-out;
            }
            @keyframes pulseHighlight {
                0% { background-color: #fef3c7; }
                50% { background-color: #fde68a; box-shadow: 0 0 0 2px #fbbf24; }
                100% { background-color: #fef9c3; box-shadow: 0 0 0 0 rgba(251, 191, 36, 0); }
            }

            /* Copy Button (Placeholder) */
            .copy-btn {
                @apply opacity-0 absolute -left-8 top-0 p-1 text-gray-400 hover:text-gray-600 focus:outline-none transition-opacity duration-200;
            }
            .transcript-entry:hover .copy-btn {
                @apply opacity-100;
            }

            /* Divider */
            .transcript-divider {
                @apply my-8 border-t border-gray-200;
            }
        }
    </style>
</head>
<body class="bg-background font-sans">
    <div class="transcript-container">
        <!-- Header -->
        <header class="transcript-header">
            <h1 class="header-title">Meeting Transcript - Startup Coaching Session</h1>
            <div class="header-controls">
                <div class="relative">
                    <input type="text" id="transcript-search" class="search-input" placeholder="Search in transcript...">
                    <i data-feather="search" class="w-4 h-4 absolute right-3 top-2 text-gray-400 pointer-events-none"></i>
                </div>
                <button class="download-btn">
                    <i data-feather="download" class="w-4 h-4 mr-1"></i> Download
                </button>
            </div>
        </header>

        <!-- Search Results Bar (Initially Hidden) -->
        <div id="search-results-bar" class="search-results-bar hidden">
            <div>
                <span class="search-info">Found 3 results for "<span id="search-term-display">market validation</span>"</span>
                <button id="close-search-btn" class="close-search-btn">
                    <i data-feather="x" class="w-4 h-4"></i>
                </button>
            </div>
            <div class="jump-buttons">
                <button class="jump-btn" data-target="ts-02-15">📍 Jump to 02:15</button>
                <button class="jump-btn" data-target="ts-08-45">📍 Jump to 08:45</button>
                <button class="jump-btn" data-target="ts-16-22">📍 Jump to 16:22</button>
            </div>
        </div>

        <!-- Transcript Content Area -->
        <div class="transcript-content-area" id="transcript-content">
            <!-- Progress Bar -->
            <div class="progress-bar-container">
                <div class="progress-bar" id="progress-bar" style="width: 0%;"></div>
            </div>

            <!-- Transcript Entries -->
            <div class="transcript-entry" id="ts-00-00">
                <div class="entry-header">
                    <span class="timestamp">[00:00]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Welcome everyone to today's session on startup strategy. I'm here to help you navigate the challenges of building and scaling a successful venture.
                </div>
            </div>

            <div class="transcript-entry" id="ts-02-15">
                <div class="entry-header">
                    <span class="timestamp">[02:15]</span>
                    <div class="speaker-name user-name">
                        <div class="speaker-avatar user-avatar">👤</div>
                        John Doe
                    </div>
                </div>
                <div class="entry-text">
                    What's the best approach for <span class="highlight">market validation</span> in a crowded space?
                </div>
            </div>

            <div class="transcript-entry" id="ts-02-18">
                <div class="entry-header">
                    <span class="timestamp">[02:18]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Alright, listen up! <span class="highlight">Market validation</span> is the <strong>holy grail</strong> of startup success. You want to get out there and talk to <em>real customers</em>. Don't hide behind your laptop - hit the streets, knock on doors, make calls!
                </div>
            </div>

            <div class="transcript-entry" id="ts-02-45">
                <div class="entry-header">
                    <span class="timestamp">[02:45]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Run lean experiments, launch an MVP faster than your competitors can say 'disruption', and iterate like your life depends on it!
                </div>
            </div>

            <div class="transcript-entry" id="ts-03-12">
                <div class="entry-header">
                    <span class="timestamp">[03:12]</span>
                    <div class="speaker-name user-name">
                        <div class="speaker-avatar user-avatar">👤</div>
                        John Doe
                    </div>
                </div>
                <div class="entry-text">
                    That makes sense. How do I know if I'm getting good feedback?
                </div>
            </div>

            <div class="transcript-entry" id="ts-03-15">
                <div class="entry-header">
                    <span class="timestamp">[03:15]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Good feedback <em>stings</em> a little! If everyone's telling you your idea is amazing, you're not asking the hard questions. Look for patterns in criticism - that's where gold lives!
                </div>
            </div>

            <div class="transcript-divider"></div>

            <div class="transcript-entry" id="ts-08-30">
                <div class="entry-header">
                    <span class="timestamp">[08:30]</span>
                    <div class="speaker-name user-name">
                        <div class="speaker-avatar user-avatar">👤</div>
                        Jane Smith
                    </div>
                </div>
                <div class="entry-text">
                    How do we make sure our value proposition stands out?
                </div>
            </div>

            <div class="transcript-entry" id="ts-08-45">
                <div class="entry-header">
                    <span class="timestamp">[08:45]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    It's about <strong>clarity</strong> and <strong>uniqueness</strong>. Clearly articulate the specific problem you solve and how you solve it better or differently than existing alternatives. This is your North Star. <span class="highlight">Market validation</span> helps prove this resonates.
                </div>
            </div>

            <div class="transcript-divider"></div>

            <div class="transcript-entry" id="ts-15-45">
                <div class="entry-header">
                    <span class="timestamp">[15:45]</span>
                    <div class="speaker-name user-name">
                        <div class="speaker-avatar user-avatar">👤</div>
                        John Doe
                    </div>
                </div>
                <div class="entry-text">
                    When should we start thinking about fundraising?
                </div>
            </div>

            <div class="transcript-entry" id="ts-16-00">
                <div class="entry-header">
                    <span class="timestamp">[16:00]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Ideally, after you have some traction - maybe a prototype, early users, or revenue. You need to show investors that there's real demand and that you can execute.
                </div>
            </div>

            <div class="transcript-entry" id="ts-16-22">
                <div class="entry-header">
                    <span class="timestamp">[16:22]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Early <span class="highlight">market validation</span> data is a powerful tool in your pitch deck. It shows you're not just guessing.
                </div>
            </div>

            <div class="transcript-entry" id="ts-20-10">
                <div class="entry-header">
                    <span class="timestamp">[20:10]</span>
                    <div class="speaker-name user-name">
                        <div class="speaker-avatar user-avatar">👤</div>
                        Jane Smith
                    </div>
                </div>
                <div class="entry-text">
                    What are the biggest scaling challenges we should anticipate?
                </div>
            </div>

            <div class="transcript-entry" id="ts-20-25">
                <div class="entry-header">
                    <span class="timestamp">[20:25]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    Common ones include maintaining quality as you grow, managing team dynamics, and ensuring your systems and processes can handle increased load. Planning for these early helps mitigate risks.
                </div>
            </div>

            <div class="transcript-entry" id="ts-25-20">
                <div class="entry-header">
                    <span class="timestamp">[25:20]</span>
                    <div class="speaker-name agent-name">
                        <div class="speaker-avatar agent-avatar">🤖</div>
                        Hustle Coach
                    </div>
                </div>
                <div class="entry-text">
                    That's all the time we have for today. Remember to focus on your customers, stay adaptable, and keep iterating. Good luck with your ventures!
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            // --- DOM Elements ---
            const searchInput = document.getElementById('transcript-search');
            const searchResultsBar = document.getElementById('search-results-bar');
            const searchTermDisplay = document.getElementById('search-term-display');
            const closeSearchBtn = document.getElementById('close-search-btn');
            const jumpButtons = document.querySelectorAll('.jump-btn');
            const transcriptEntries = document.querySelectorAll('.transcript-entry');
            const progressBar = document.getElementById('progress-bar');
            const transcriptContent = document.getElementById('transcript-content');

            // --- Simulate Initial Search State (for demo) ---
            // Pre-highlight the term "market validation" and show the search results bar
            const searchTerm = "market validation";
            searchTermDisplay.textContent = searchTerm;
            searchInput.value = searchTerm;
            searchResultsBar.classList.remove('hidden');
            highlightText(searchTerm);

            // --- Search Functionality ---
            function performSearch(term) {
                term = term.trim();
                if (term === '') {
                    clearHighlights();
                    searchResultsBar.classList.add('hidden');
                    return;
                }

                searchTermDisplay.textContent = term;
                highlightText(term);
                searchResultsBar.classList.remove('hidden');
                // In a real app, you'd calculate actual results and update jump buttons
            }

            function highlightText(term) {
                clearHighlights(); // Clear previous highlights
                if (!term) return;

                const regex = new RegExp(`(${term})`, 'gi'); // Case-insensitive, global

                transcriptEntries.forEach(entry => {
                    const textElements = entry.querySelectorAll('.entry-text');
                    textElements.forEach(element => {
                        const innerHTML = element.innerHTML;
                        // This simple replace might not work perfectly with existing HTML tags.
                        // A more robust solution would parse text nodes specifically.
                        // For this demo, it works with the current structure.
                        const newHTML = innerHTML.replace(regex, '<span class="highlight">$1</span>');
                        if (newHTML !== innerHTML) {
                            element.innerHTML = newHTML;
                        }
                    });
                });
            }

            function clearHighlights() {
                // Remove highlight spans
                document.querySelectorAll('.highlight').forEach(span => {
                    span.outerHTML = span.innerHTML; // Replace span with its content
                });
                // Normalize text nodes to merge any split ones (important for accurate highlighting next time)
                transcriptContent.normalize();
            }

            searchInput.addEventListener('input', (e) => {
                performSearch(e.target.value);
            });

            // --- Close Search Results ---
            closeSearchBtn.addEventListener('click', () => {
                searchInput.value = '';
                clearHighlights();
                searchResultsBar.classList.add('hidden');
            });

            // --- Jump Navigation ---
            jumpButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);

                    if (targetElement) {
                        // Smooth scroll to the element
                        targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        // Add a temporary pulse highlight effect
                        targetElement.classList.add('highlight-pulse');
                        setTimeout(() => {
                            targetElement.classList.remove('highlight-pulse');
                        }, 1000); // Match animation duration
                    }
                });
            });

            // --- Reading Progress ---
            transcriptContent.addEventListener('scroll', () => {
                const scrollTop = transcriptContent.scrollTop;
                const scrollHeight = transcriptContent.scrollHeight - transcriptContent.clientHeight;
                const progressPercent = (scrollTop / scrollHeight) * 100;
                progressBar.style.width = `${progressPercent}%`;
            });

            // --- Timestamp Click Navigation (Basic) ---
            document.querySelectorAll('.timestamp').forEach(ts => {
                ts.addEventListener('click', function() {
                    // In a full app, this would scroll to the specific entry
                    console.log(`Jumping to timestamp: ${this.textContent}`);
                    alert(`In a full app, this would scroll to the entry at ${this.textContent}.`);
                });
            });

        });
    </script>
</body>
</html>
</file>

<file path="proto/chat.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - AI Meeting Assistant</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Define Tailwind config before loading the CDN so the Play CDN can pick up custom theme values */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)', 
                        background: 'var(--background)',
                        text: '#212529',
                        user: '#10b981',
                        agent: '#8b5cf6',
                        ai: 'var(--primary)',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style type="text/tailwindcss">
        /* Chat-specific styles that integrate with design system */
        .chat-container {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 65px); /* Account for header */
            background: var(--color-background, #f8f9fa);
        }

        .chat-header {
            padding: 12px 16px;
            background: var(--color-surface, #fff);
            border-bottom: 1px solid var(--color-border, #e5e7eb);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-history-area {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 16px;
        }

        .message-bubble {
            max-width: 85%;
            display: flex;
        }

        .user-message {
            align-self: flex-end;
            flex-direction: row-reverse;
        }

        .ai-message {
            align-self: flex-start;
        }

        .message-sender {
            display: flex;
            flex-direction: column;
            align-items: center;
            margin: 0 8px 8px 8px;
        }

        .sender-avatar {
            height: 32px;
            width: 32px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            margin-bottom: 4px;
        }

        .user-avatar {
            background: var(--color-success, #10b981);
            color: white;
        }

        .ai-avatar {
            background: var(--color-primary, #4361ee);
            color: white;
        }

        .message-content {
            padding: 12px 16px;
            border-radius: 16px;
            position: relative;
            box-shadow: var(--shadow-sm, 0 1px 3px rgba(0,0,0,0.1));
        }

        .user-message .message-content {
            background: var(--color-success, #10b981);
            color: white;
            border-top-right-radius: 4px;
        }

        .ai-message .message-content {
            background: var(--color-surface, #fff);
            border: 1px solid var(--color-border, #e5e7eb);
            border-top-left-radius: 4px;
        }

        .input-area {
            padding: 16px;
            background: var(--color-surface, #fff);
            border-top: 1px solid var(--color-border, #e5e7eb);
        }

        .input-form {
            display: flex;
            gap: 8px;
            align-items: flex-end;
        }

        .message-input {
            flex: 1;
            min-height: 40px;
            max-height: 120px;
            padding: 8px 12px;
            border: 1px solid var(--color-border, #d1d5db);
            border-radius: var(--radius-base, 8px);
            background: var(--color-surface, #fff);
            resize: none;
            font-family: inherit;
        }

        .message-input:focus {
            outline: none;
            border-color: var(--color-primary, #4361ee);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
        }

        .send-btn {
            background: var(--color-primary, #4361ee);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: var(--radius-base, 8px);
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 4px;
            font-weight: 500;
            height: 40px;
        }

        .send-btn:hover {
            background: var(--color-primary-hover, #3f37c9);
        }

        .copy-btn {
            position: absolute;
            top: -8px;
            right: -8px;
            background: var(--color-surface, #fff);
            border: 1px solid var(--color-border, #e5e7eb);
            border-radius: 50%;
            padding: 6px;
            cursor: pointer;
            opacity: 0;
            transition: opacity 0.2s;
        }

        .message-content:hover .copy-btn {
            opacity: 1;
        }

        .typing-indicator {
            display: flex;
            align-self: flex-start;
            margin-bottom: 16px;
        }

        .typing-bubble {
            padding: 12px 16px;
            background: var(--color-surface, #fff);
            border: 1px solid var(--color-border, #e5e7eb);
            border-radius: 16px;
            border-top-left-radius: 4px;
        }

        .typing-dots {
            display: flex;
            gap: 4px;
        }

        .typing-dot {
            width: 8px;
            height: 8px;
            background: var(--color-text-secondary, #6b7280);
            border-radius: 50%;
            animation: typing 1.4s infinite ease-in-out;
        }

        .typing-dot:nth-child(2) { animation-delay: 0.2s; }
        .typing-dot:nth-child(3) { animation-delay: 0.4s; }

        @keyframes typing {
            0%, 80%, 100% { transform: scale(1); opacity: 0.5; }
            40% { transform: scale(1.2); opacity: 1; }
        }

        .slide-in-left {
            animation: slideInLeft 0.3s ease-out;
        }

        .slide-in-right {
            animation: slideInRight 0.3s ease-out;
        }

        @keyframes slideInLeft {
            from { transform: translateX(-20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @keyframes slideInRight {
            from { transform: translateX(20px); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    </style>
</head>
<body class="bg-background font-sans">
    <div class="flex flex-col h-screen">
        <!-- Header -->
        <header class="bg-white border-b border-gray-200">
            <div class="flex items-center justify-between px-4 py-3">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="md:hidden text-gray-500 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>
                    <div class="flex items-center">
                        <span class="text-xl font-bold text-primary">Shikshak</span>
                        <span class="ml-2 px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded">Pro ✨</span>
                    </div>
                </div>
                
                <div class="flex-1 max-w-md mx-4">
                    <div class="relative">
                        <input type="text" placeholder="Search meetings..." class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 ease-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-2.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                </div>
                
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                            </svg>
                        </button>
                        <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full animate-pulse">3</span>
                    </div>
                    <div class="relative">
                        <button class="flex items-center space-x-1 text-gray-700 hover:text-gray-900 focus:outline-none">
                            <span>John Doe</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </header>

        <div class="flex flex-1 overflow-hidden">
            <!-- Sidebar -->
            <aside id="sidebar" class="site-sidebar">
                <nav class="flex-1 py-4">
                    <a href="dashboard.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                        Dashboard
                    </a>
                    <a href="meet-manage.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                        </svg>
                        Meetings
                    </a>
                    <a href="agent-manage.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                        </svg>
                        Agents
                    </a>
                    <a href="chat.html" class="sidebar-item active">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-3.582 8-8 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 3.582-8 8-8s8 3.582 8 8z" />
                        </svg>
                        Chat History
                    </a>
                    <a href="post-summary.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        Analytics
                    </a>
                </nav>
            </aside>

            <!-- Chat Container -->
            <main class="flex-1 chat-container">
                <!-- Chat Header -->
                <header class="chat-header">
                    <h1 class="text-sm font-semibold text-gray-800">Ask questions about your meeting with Hustle Coach</h1>
                    <button class="flex items-center text-xs text-gray-500 hover:text-gray-700 focus:outline-none" id="clear-btn">
                        <i data-feather="trash-2" class="w-4 h-4 mr-1"></i> Clear
                    </button>
                </header>

                <!-- Chat History Area -->
                <div class="chat-history-area" id="chat-history">
                    <!-- AI Welcome Message -->
                    <div class="message-bubble ai-message slide-in-left">
                        <div class="message-sender">
                            <div class="sender-avatar ai-avatar">
                                <i data-feather="cpu" class="w-4 h-4"></i>
                            </div>
                            <span class="text-xs text-gray-500">AI Assistant</span>
                        </div>
                        <div class="message-content">
                            <div class="ai-message-text">
                                <p>Hi! I've analyzed your meeting with Hustle Coach. I can help you with questions about the discussion, extract key insights, or clarify any points made during the conversation. What would you like to know?</p>
                            </div>
                            <button class="copy-btn" title="Copy message">
                                <i data-feather="copy" class="w-4 h-4"></i>
                            </button>
                        </div>
                    </div>

                    <!-- User Question -->
                    <div class="message-bubble user-message slide-in-right">
                        <div class="message-sender">
                            <div class="sender-avatar user-avatar">
                                👤
                            </div>
                            <span class="text-xs text-gray-500">You</span>
                        </div>
                        <div class="message-content">
                            <div class="text-white">
                                What were the main points about fundraising timeline that Hustle Coach mentioned?
                            </div>
                        </div>
                    </div>

                    <!-- AI Response -->
                    <div class="message-bubble ai-message slide-in-left">
                        <div class="message-sender">
                            <div class="sender-avatar ai-avatar">
                                <i data-feather="cpu" class="w-4 h-4"></i>
                            </div>
                            <span class="text-xs text-gray-500">AI Assistant</span>
                        </div>
                        <div class="message-content">
                            <div class="ai-message-text">
                                <p>Based on your conversation, Hustle Coach outlined a 3-phase approach:</p>
                                <p><strong>Phase 1 (Months 1-3):</strong> MVP development and initial validation</p>
                                <ul class="list-disc pl-5 mb-2">
                                    <li class="mb-1">Focus on product-market fit</li>
                                    <li class="mb-1">Gather user feedback and iterate</li>
                                </ul>
                                <p><strong>Phase 2 (Months 4-8):</strong> Seed funding preparation</p>
                                <ul class="list-disc pl-5 mb-2">
                                    <li class="mb-1">Build traction metrics</li>
                                    <li class="mb-1">Develop investor pitch deck</li>
                                </ul>
                                <p><strong>Phase 3 (Months 9-12):</strong> Series A preparation</p>
                                <ul class="list-disc pl-5 mb-2">
                                    <li class="mb-1">Scale team and operations</li>
                                    <li class="mb-1">Demonstrate sustainable growth</li>
                                </ul>
                                <p>This was discussed around the <a href="#" class="text-primary hover:underline">15:45</a> timestamp. Would you like me to provide more details on any specific phase?</p>
                            </div>
                            <button class="copy-btn" title="Copy message">
                                <i data-feather="copy" class="w-4 h-4"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Typing Indicator (Initially Hidden) -->
                    <div class="typing-indicator hidden" id="typing-indicator">
                        <div class="message-sender">
                            <div class="sender-avatar ai-avatar">
                                <i data-feather="cpu" class="w-4 h-4"></i>
                            </div>
                            <span class="text-xs text-gray-500">AI Assistant</span>
                        </div>
                        <div class="typing-bubble">
                            <div class="typing-dots">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Input Area -->
                <div class="input-area">
                    <form class="input-form" id="message-form">
                        <textarea
                            class="message-input"
                            id="message-input"
                            placeholder="Ask about this meeting..."
                            rows="1"
                        ></textarea>
                        <button type="submit" class="send-btn" id="send-btn">
                            <span>Send</span>
                            <i data-feather="send" class="w-4 h-4 ml-1"></i>
                        </button>
                    </form>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            // --- DOM Elements ---
            const chatHistory = document.getElementById('chat-history');
            const messageForm = document.getElementById('message-form');
            const messageInput = document.getElementById('message-input');
            const sendBtn = document.getElementById('send-btn');
            const typingIndicator = document.getElementById('typing-indicator');
            const clearBtn = document.getElementById('clear-btn');
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebar-toggle');

            // --- Sidebar Toggle ---
            if (sidebarToggle) {
                sidebarToggle.addEventListener('click', function() {
                    sidebar.classList.toggle('translate-x-0');
                    sidebar.classList.toggle('-translate-x-full');
                });
            }

            // Close sidebar when clicking outside on mobile
            document.addEventListener('click', function(e) {
                if (window.innerWidth < 768 && 
                    !sidebar.contains(e.target) && 
                    !sidebarToggle.contains(e.target) &&
                    !sidebar.classList.contains('-translate-x-full')) {
                    sidebar.classList.add('-translate-x-full');
                    sidebar.classList.remove('translate-x-0');
                }
            });

            // --- Auto-resize textarea ---
            messageInput.addEventListener('input', function () {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight > 40 * 4) ? '120px' : (this.scrollHeight) + 'px';
            });

            // --- Simulate Sending a Message ---
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                const messageText = messageInput.value.trim();
                if (messageText) {
                    // 1. Add user message to chat
                    addUserMessage(messageText);
                    // 2. Clear input and reset height
                    messageInput.value = '';
                    messageInput.style.height = '40px';
                    // 3. Disable send button temporarily
                    sendBtn.disabled = true;
                    // 4. Show typing indicator
                    typingIndicator.classList.remove('hidden');
                    chatHistory.scrollTop = chatHistory.scrollHeight;
                    // 5. Simulate AI processing and response
                    setTimeout(() => {
                        // Hide typing indicator
                        typingIndicator.classList.add('hidden');
                        // Add AI response
                        addAiResponse("This is a simulated response from the AI based on your question: \"" + messageText + "\". In a real application, this would be generated by processing the meeting content.");
                        // Re-enable send button
                        sendBtn.disabled = false;
                        // Scroll to bottom
                        chatHistory.scrollTop = chatHistory.scrollHeight;
                    }, 2000); // Simulate 2 second delay
                }
            });

            // --- Add User Message to Chat ---
            function addUserMessage(text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message-bubble', 'user-message', 'slide-in-right');
                messageElement.innerHTML = `
                    <div class="message-sender">
                        <div class="sender-avatar user-avatar">👤</div>
                        <span class="text-xs text-gray-500">You</span>
                    </div>
                    <div class="message-content">
                        <div class="text-white">${text}</div>
                    </div>
                `;
                chatHistory.appendChild(messageElement);
                chatHistory.scrollTop = chatHistory.scrollHeight;
            }

            // --- Add AI Response to Chat ---
            function addAiResponse(text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message-bubble', 'ai-message', 'slide-in-left');
                messageElement.innerHTML = `
                    <div class="message-sender">
                        <div class="sender-avatar ai-avatar">
                            <i data-feather="cpu" class="w-4 h-4"></i>
                        </div>
                        <span class="text-xs text-gray-500">AI Assistant</span>
                    </div>
                    <div class="message-content">
                        <div class="ai-message-text">
                            <p>${text}</p>
                        </div>
                        <button class="copy-btn" title="Copy message">
                            <i data-feather="copy" class="w-4 h-4"></i>
                        </button>
                    </div>
                `;
                chatHistory.appendChild(messageElement);
                // Re-initialize Feather icons for the new copy button
                feather.replace();
                chatHistory.scrollTop = chatHistory.scrollHeight;
            }

            // --- Copy Message Functionality ---
            chatHistory.addEventListener('click', function(e) {
                if (e.target.closest('.copy-btn')) {
                    const copyBtn = e.target.closest('.copy-btn');
                    const messageContent = copyBtn.closest('.message-content').querySelector('.ai-message-text, .text-white').innerText;
                    navigator.clipboard.writeText(messageContent).then(() => {
                        // Optional: Show a visual confirmation
                        const originalIcon = copyBtn.innerHTML;
                        copyBtn.innerHTML = '<i data-feather="check" class="w-4 h-4"></i>';
                        feather.replace();
                        setTimeout(() => {
                            copyBtn.innerHTML = originalIcon;
                            feather.replace();
                        }, 1500);
                    }).catch(err => {
                        console.error('Failed to copy text: ', err);
                    });
                }
            });

            // --- Clear Chat History ---
            if (clearBtn) {
                clearBtn.addEventListener('click', function() {
                    if (confirm("Are you sure you want to clear the chat history?")) {
                        // Remove all messages except the initial AI welcome message and typing indicator
                        const messages = chatHistory.querySelectorAll('.message-bubble');
                        messages.forEach(msg => {
                            if (!msg.querySelector('.ai-message-text') || !msg.querySelector('.ai-message-text').textContent.includes("Hi! I've analyzed your meeting")) {
                                msg.remove();
                            }
                        });
                    }
                });
            }

        });
    </script>
                `;
                chatHistory.appendChild(messageElement);
                chatHistory.scrollTop = chatHistory.scrollHeight;
            }

            // --- Add AI Response to Chat ---
            function addAiResponse(text) {
                const messageElement = document.createElement('div');
                messageElement.classList.add('message-bubble', 'ai-message', 'slide-in-left');
                messageElement.innerHTML = `
                    <div class="message-sender">
                        <div class="sender-avatar ai-avatar flex items-center justify-center">
                            <i data-feather="cpu" class="w-4 h-4"></i>
                        </div>
                        <span class="sender-name">AI Assistant</span>
                    </div>
                    <div class="message-content">
                        <div class="ai-message-text">
                            <p>${text}</p>
                        </div>
                        <button class="copy-btn" title="Copy message">
                            <i data-feather="copy" class="w-4 h-4"></i>
                        </button>
                    </div>
                `;
                chatHistory.appendChild(messageElement);
                // Re-initialize Feather icons for the new copy button
                feather.replace();
                chatHistory.scrollTop = chatHistory.scrollHeight;
            }

            // --- Copy Message Functionality ---
            chatHistory.addEventListener('click', function(e) {
                if (e.target.closest('.copy-btn')) {
                    const copyBtn = e.target.closest('.copy-btn');
                    const messageContent = copyBtn.closest('.message-content').querySelector('.ai-message-text, .text-white').innerText;
                    navigator.clipboard.writeText(messageContent).then(() => {
                        // Optional: Show a visual confirmation
                        const originalIcon = copyBtn.innerHTML;
                        copyBtn.innerHTML = '<i data-feather="check" class="w-4 h-4"></i>';
                        feather.replace();
                        setTimeout(() => {
                            copyBtn.innerHTML = originalIcon;
                            feather.replace();
                        }, 1500);
                    }).catch(err => {
                        console.error('Failed to copy text: ', err);
                    });
                }
            });

            // --- Clear Chat History ---
            clearBtn.addEventListener('click', function() {
                if (confirm("Are you sure you want to clear the chat history?")) {
                    // Remove all messages except the initial AI welcome message and typing indicator
                    const messages = chatHistory.querySelectorAll('.message-bubble');
                    messages.forEach(msg => {
                        if (!msg.querySelector('.ai-message-text') || !msg.querySelector('.ai-message-text').textContent.includes("Hi! I've analyzed your meeting")) {
                            msg.remove();
                        }
                    });
                }
            });

        });
    </script>
</body>
</html>
</file>

<file path="proto/create-agent.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Create AI Agent Modal</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Shared stylesheet (centralized styles replace local @apply blocks) -->
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
</head>
<body class="bg-background font-sans min-h-screen flex items-center justify-center p-4">
    <!-- Demo Button to trigger modal -->
    <button id="open-modal-btn" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
        Open Create Agent Modal
    </button>

    <!-- Create Agent Modal -->
    <div id="create-agent-modal" class="modal-backdrop">
        <div class="modal-container">
            <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
                <h3 class="text-lg font-semibold text-gray-900">Create AI Agent</h3>
                <button id="close-modal-btn" class="text-gray-400 hover:text-gray-500 focus:outline-none">
                    <i data-feather="x"></i>
                </button>
            </div>
            <form id="agent-form" class="px-6 py-4 space-y-5">
                <div>
                    <label for="agent-name" class="block text-sm font-medium text-gray-700 mb-1">Agent Name</label>
                    <input type="text" id="agent-name" class="form-input" placeholder="Hustle Coach" required>
                </div>

                <div>
                    <label for="agent-role" class="block text-sm font-medium text-gray-700 mb-1">Role & Expertise</label>
                    <input type="text" id="agent-role" class="form-input" placeholder="Startup Mentor" required>
                </div>

                <div>
                    <label for="agent-personality" class="block text-sm font-medium text-gray-700 mb-1">Personality & Instructions</label>
                    <textarea id="agent-personality" class="form-textarea" placeholder="Describe the agent's personality and core instructions..."></textarea>
                    <div id="char-count" class="char-counter">0/500</div>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Response Style</label>
                    <div class="radio-group">
                        <label class="radio-label">
                            <input type="radio" name="response-style" value="conversational" class="radio-input sr-only" checked>
                            <span class="radio-custom">
                                <span class="ripple"></span>
                            </span>
                            Conversational
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="response-style" value="professional" class="radio-input sr-only">
                            <span class="radio-custom">
                                <span class="ripple"></span>
                            </span>
                            Professional
                        </label>
                        <label class="radio-label">
                            <input type="radio" name="response-style" value="casual" class="radio-input sr-only">
                            <span class="radio-custom">
                                <span class="ripple"></span>
                            </span>
                            Casual & Fun
                        </label>
                    </div>
                </div>

                <div class="flex justify-end space-x-3 pt-2">
                    <span id="draft-indicator" class="draft-indicator hidden">
                        <i data-feather="save" class="w-3 h-3 mr-1"></i> Draft Saved
                    </span>
                    <button type="button" id="cancel-btn" class="btn btn-secondary">Cancel</button>
                    <button type="submit" id="create-btn" class="btn btn-primary flex items-center">
                        <span id="create-text">Create Agent</span>
                        <svg id="loading-spinner" class="animate-spin ml-2 h-4 w-4 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <svg id="success-check" class="ml-2 h-4 w-4 text-white hidden" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                        </svg>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('create-agent-modal');
            const openModalBtn = document.getElementById('open-modal-btn');
            const closeModalBtn = document.getElementById('close-modal-btn');
            const cancelBtn = document.getElementById('cancel-btn');
            const form = document.getElementById('agent-form');
            const textarea = document.getElementById('agent-personality');
            const charCount = document.getElementById('char-count');
            const draftIndicator = document.getElementById('draft-indicator');
            const createBtn = document.getElementById('create-btn');
            const createText = document.getElementById('create-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            const successCheck = document.getElementById('success-check');

            const maxLength = 500;

            // Open modal
            openModalBtn.addEventListener('click', () => {
                modal.classList.add('active');
            });

            // Close modal functions
            const closeModal = () => {
                modal.classList.remove('active');
                // Reset form and states on close for demo
                form.reset();
                charCount.textContent = '0/500';
                charCount.classList.remove('visible');
                draftIndicator.classList.add('hidden');
                createBtn.disabled = false;
                createText.textContent = 'Create Agent';
                loadingSpinner.classList.add('hidden');
                successCheck.classList.add('hidden');
            };

            closeModalBtn.addEventListener('click', closeModal);
            cancelBtn.addEventListener('click', closeModal);

            // Click on backdrop to close
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal();
                }
            });

            // Textarea character counter
            textarea.addEventListener('input', function () {
                const currentLength = this.value.length;
                charCount.textContent = `${currentLength}/${maxLength}`;

                if (currentLength > maxLength * 0.8) {
                    charCount.classList.add('visible', 'text-yellow-600');
                } else {
                    charCount.classList.remove('text-yellow-600');
                    if (currentLength > 0) {
                        charCount.classList.add('visible');
                    } else {
                        charCount.classList.remove('visible');
                    }
                }

                // Simple validation demo
                if (currentLength > maxLength) {
                    this.classList.add('border-red-500');
                    charCount.classList.add('text-red-600');
                } else {
                    this.classList.remove('border-red-500');
                    charCount.classList.remove('text-red-600');
                }
            });

            // Auto-save draft indicator (simulated)
            let draftInterval;
            const startDraftIndicator = () => {
                draftInterval = setInterval(() => {
                    if (!draftIndicator.classList.contains('hidden')) {
                        draftIndicator.classList.remove('animate-pulse');
                        // Trigger reflow
                        void draftIndicator.offsetWidth;
                        draftIndicator.classList.add('animate-pulse');
                    }
                }, 30000); // 30 seconds
            };

            textarea.addEventListener('input', () => {
                if (textarea.value.trim() !== '') {
                    draftIndicator.classList.remove('hidden');
                    startDraftIndicator();
                } else {
                    draftIndicator.classList.add('hidden');
                    clearInterval(draftInterval);
                }
            });

            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const agentName = document.getElementById('agent-name').value.trim();
                const agentRole = document.getElementById('agent-role').value.trim();

                if (!agentName || !agentRole) {
                    alert('Please fill in the required fields.');
                    return;
                }

                // Simulate form submission
                createBtn.disabled = true;
                createText.textContent = 'Creating...';
                loadingSpinner.classList.remove('hidden');

                setTimeout(() => {
                    loadingSpinner.classList.add('hidden');
                    successCheck.classList.remove('hidden');
                    createText.textContent = 'Created!';

                    // Simulate closing after success
                    setTimeout(() => {
                        closeModal();
                    }, 1000); // Close after 1 second

                }, 2000); // Simulate 2 second delay
            });

            // Simulate initial draft save indicator for demo if textarea has content on load
            if (textarea.value.trim() !== '') {
                draftIndicator.classList.remove('hidden');
                startDraftIndicator();
            }

        });
    </script>
</body>
</html>
</file>

<file path="proto/create-meet.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Create New Meeting</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config before CDN so runtime picks up custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
</head>
<body class="bg-background font-sans min-h-screen flex items-center justify-center p-4">
    <!-- Demo Button to trigger modal -->
    <button id="open-modal-btn" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
        Open Create Meeting Modal
    </button>

    <!-- Confetti Canvas (Placeholder) -->
    <canvas id="confetti-canvas" class="hidden"></canvas>

    <!-- Create Meeting Modal -->
    <div id="create-meeting-modal" class="fixed inset-0 z-50 overflow-y-auto hidden">
        <div class="flex items-center justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <!-- Background overlay -->
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-black opacity-50"></div>
            </div>

            <!-- Modal container -->
            <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
                <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                    <div class="sm:flex sm:items-start">
                        <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                            <h3 class="text-lg leading-6 font-semibold text-gray-900 border-b border-gray-200 pb-3">
                                Create New Meeting
                            </h3>
                            <form id="meeting-form" class="mt-4 space-y-5">
                                <!-- Meeting Name -->
                                <div>
                                    <label for="meeting-name" class="block text-sm font-medium text-gray-700 mb-1">Meeting Name *</label>
                                    <input type="text" id="meeting-name" class="form-input" placeholder="Startup Coaching Session" required>
                                    <div id="name-error" class="error-message"></div>
                                </div>

                                <!-- Select AI Agent -->
                                <div>
                                    <label for="agent-select" class="block text-sm font-medium text-gray-700 mb-1">Select AI Agent *</label>
                                    <div class="custom-select w-full">
                                        <div class="select-selected">
                                            <div id="selected-agent" class="flex items-center">
                                                <span class="mr-2">🤖</span> Hustle Coach
                                            </div>
                                            <i data-feather="chevron-down" class="w-5 h-5 text-gray-500"></i>
                                        </div>
                                        <div class="select-items select-hide">
                                            <div class="select-item flex items-center" data-value="hustle-coach">
                                                <span class="mr-2">🤖</span> Hustle Coach
                                            </div>
                                            <div class="select-item flex items-center" data-value="french-tutor">
                                                <span class="mr-2">🧠</span> French Tutor
                                            </div>
                                            <div class="select-item flex items-center" data-value="interview-coach">
                                                <span class="mr-2">💼</span> Interview Coach
                                            </div>
                                        </div>
                                    </div>
                                    <div id="agent-error" class="error-message"></div>
                                </div>

                                <!-- Meeting Type -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Meeting Type</label>
                                    <div class="radio-group">
                                        <div class="radio-option">
                                            <input type="radio" id="type-instant" name="meeting-type" value="instant" class="radio-input" checked>
                                            <label for="type-instant" class="radio-label">Instant Start</label>
                                        </div>
                                        <div class="radio-option">
                                            <input type="radio" id="type-scheduled" name="meeting-type" value="scheduled" class="radio-input">
                                            <label for="type-scheduled" class="radio-label">Scheduled</label>
                                        </div>
                                        <div class="radio-option">
                                            <input type="radio" id="type-recurring" name="meeting-type" value="recurring" class="radio-input">
                                            <label for="type-recurring" class="radio-label">Recurring</label>
                                        </div>
                                    </div>
                                </div>

                                <!-- Description -->
                                <div>
                                    <label for="meeting-description" class="block text-sm font-medium text-gray-700 mb-1">Description (Optional)</label>
                                    <textarea id="meeting-description" class="form-textarea" placeholder="Discussion about startup strategy, fundraising tactics, and market disruption opportunities. Focus on actionable advice." maxlength="500"></textarea>
                                    <div id="char-count" class="char-counter normal text-right">0/500</div>
                                </div>

                                <!-- Agent Preview -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-1">Agent Preview</label>
                                    <div id="agent-preview-box" class="agent-preview">
                                        <div class="flex items-start">
                                            <div class="flex-shrink-0 h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                                                <span class="text-xl">🤖</span>
                                            </div>
                                            <div>
                                                <h4 class="font-semibold text-gray-900">🤖 Hustle Coach</h4>
                                                <p class="text-sm text-gray-600 mt-1">"Direct, hyper-driven startup mentor"</p>
                                                <p class="text-xs text-gray-500 mt-1">Expertise: Entrepreneurship, Fundraising</p>
                                                <p class="text-xs text-gray-500">Response Style: Conversational</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
                <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                    <button type="button" id="create-btn" class="btn btn-primary w-full sm:w-auto sm:ml-3 flex items-center justify-center" disabled>
                        <span id="create-text">Create Meeting</span>
                        <svg id="loading-spinner" class="animate-spin ml-2 h-4 w-4 text-white hidden" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                    </button>
                    <button type="button" id="cancel-btn" class="mt-3 w-full sm:mt-0 sm:w-auto btn btn-secondary">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('create-meeting-modal');
            const openModalBtn = document.getElementById('open-modal-btn');
            const cancelBtn = document.getElementById('cancel-btn');
            const form = document.getElementById('meeting-form');
            const createBtn = document.getElementById('create-btn');
            const createText = document.getElementById('create-text');
            const loadingSpinner = document.getElementById('loading-spinner');
            const meetingNameInput = document.getElementById('meeting-name');
            const agentSelect = document.querySelector('.custom-select');
            const selectedAgentDisplay = document.getElementById('selected-agent');
            const selectItems = document.querySelector('.select-items');
            const selectItemsList = document.querySelectorAll('.select-item');
            const agentPreviewBox = document.getElementById('agent-preview-box');
            const meetingDescription = document.getElementById('meeting-description');
            const charCount = document.getElementById('char-count');
            const nameError = document.getElementById('name-error');
            const agentError = document.getElementById('agent-error');

            const maxLength = 500;

            // Agent data for preview
            const agents = {
                'hustle-coach': {
                    name: '🤖 Hustle Coach',
                    description: '"Direct, hyper-driven startup mentor"',
                    expertise: 'Entrepreneurship, Fundraising',
                    style: 'Conversational',
                    icon: '🤖'
                },
                'french-tutor': {
                    name: '🧠 French Tutor',
                    description: '"Patient, encouraging language teacher"',
                    expertise: 'French Language, Grammar',
                    style: 'Professional',
                    icon: '🧠'
                },
                'interview-coach': {
                    name: '💼 Interview Coach',
                    description: '"Professional, constructive feedback for interviews"',
                    expertise: 'Tech Interviews, Career Advice',
                    style: 'Professional',
                    icon: '💼'
                }
            };

            // Open modal
            openModalBtn.addEventListener('click', () => {
                modal.classList.remove('hidden');
            });

            // Close modal functions
            const closeModal = () => {
                modal.classList.add('hidden');
                // Reset form and states on close for demo
                form.reset();
                updateCreateButtonState();
                nameError.classList.remove('show');
                nameError.textContent = '';
                agentError.classList.remove('show');
                agentError.textContent = '';
                charCount.textContent = '0/500';
                charCount.className = 'char-counter normal text-right';
                // Reset agent preview to default
                updateAgentPreview('hustle-coach');
                // Reset select dropdown
                selectedAgentDisplay.innerHTML = '<span class="mr-2">🤖</span> Hustle Coach';
                selectItems.classList.add('select-hide');
                loadingSpinner.classList.add('hidden');
                createText.textContent = 'Create Meeting';
                createBtn.disabled = true;
            };

            cancelBtn.addEventListener('click', closeModal);

            // Click on backdrop to close (simplified check)
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closeModal();
                }
            });

            // Custom Select Dropdown Logic
            agentSelect.addEventListener('click', function(e) {
                e.stopPropagation();
                selectItems.classList.toggle('select-hide');
            });

            selectItemsList.forEach(item => {
                item.addEventListener('click', function() {
                    const value = this.getAttribute('data-value');
                    const text = this.textContent.trim();
                    selectedAgentDisplay.innerHTML = text;
                    selectItems.classList.add('select-hide');
                    // Update preview
                    updateAgentPreview(value);
                    // Update meeting name suggestion if field is empty
                    if (!meetingNameInput.value.trim()) {
                        // Simple auto-suggestion based on agent
                        const suggestionMap = {
                            'hustle-coach': 'Startup Coaching Session',
                            'french-tutor': 'French Language Practice',
                            'interview-coach': 'Interview Preparation Session'
                        };
                        meetingNameInput.value = suggestionMap[value] || 'New Meeting';
                        updateCreateButtonState(); // Re-check button state
                    }
                    updateCreateButtonState(); // Re-check button state
                });
            });

            // Close dropdown if clicked outside
            document.addEventListener('click', function() {
                selectItems.classList.add('select-hide');
            });

            // Update Agent Preview
            function updateAgentPreview(agentKey) {
                const agent = agents[agentKey];
                if (agent) {
                    agentPreviewBox.innerHTML = `
                        <div class="flex items-start">
                            <div class="flex-shrink-0 h-12 w-12 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                                <span class="text-xl">${agent.icon}</span>
                            </div>
                            <div>
                                <h4 class="font-semibold text-gray-900">${agent.name}</h4>
                                <p class="text-sm text-gray-600 mt-1">${agent.description}</p>
                                <p class="text-xs text-gray-500 mt-1">Expertise: ${agent.expertise}</p>
                                <p class="text-xs text-gray-500">Response Style: ${agent.style}</p>
                            </div>
                        </div>
                    `;
                }
            }

            // Character counter for description
            meetingDescription.addEventListener('input', function () {
                const currentLength = this.value.length;
                charCount.textContent = `${currentLength}/${maxLength}`;

                if (currentLength > maxLength * 0.9) {
                    charCount.className = 'char-counter error text-right';
                } else if (currentLength > maxLength * 0.75) {
                    charCount.className = 'char-counter warning text-right';
                } else {
                    charCount.className = 'char-counter normal text-right';
                }
            });

            // Validate form fields and enable/disable create button
            function updateCreateButtonState() {
                const name = meetingNameInput.value.trim();
                const selectedAgentText = selectedAgentDisplay.textContent.trim();
                const isAgentSelected = selectedAgentText !== 'Select an agent';

                const isValid = name !== '' && isAgentSelected;
                createBtn.disabled = !isValid;
            }

            meetingNameInput.addEventListener('input', updateCreateButtonState);
            // Initial check in case default values are present
            updateCreateButtonState();

            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                const meetingName = meetingNameInput.value.trim();
                const selectedAgentText = selectedAgentDisplay.textContent.trim();

                let isValid = true;

                // Reset errors
                nameError.classList.remove('show');
                nameError.textContent = '';
                agentError.classList.remove('show');
                agentError.textContent = '';

                if (!meetingName) {
                    nameError.textContent = 'Meeting name is required.';
                    nameError.classList.add('show');
                    isValid = false;
                }

                if (selectedAgentText === 'Select an agent' || !selectedAgentText) {
                    agentError.textContent = 'Please select an AI agent.';
                    agentError.classList.add('show');
                    isValid = false;
                }

                if (!isValid) {
                    return;
                }

                // Simulate form submission
                createBtn.disabled = true;
                createText.textContent = 'Creating...';
                loadingSpinner.classList.remove('hidden');

                setTimeout(() => {
                    loadingSpinner.classList.add('hidden');
                    createText.textContent = 'Meeting Created!';

                    // Show confetti placeholder
                    const canvas = document.getElementById('confetti-canvas');
                    canvas.classList.remove('hidden');
                    // In a real app, you'd trigger a confetti library here
                    console.log("Confetti animation would play here");

                    // Simulate redirect after success
                    setTimeout(() => {
                        closeModal();
                        canvas.classList.add('hidden');
                        // window.location.href = '/meeting/123'; // Example redirect
                    }, 2000); // Redirect after 2 seconds

                }, 1500); // Simulate 1.5 second delay
            });

        });
    </script>
</body>
</html>
</file>

<file path="proto/dashboard.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak Dashboard</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
</head>
<body class="bg-background font-sans">
    <div class="flex flex-col h-screen">
        <!-- Navbar -->
        <header class="bg-white border-b border-gray-200">
            <div class="flex items-center justify-between px-4 py-3">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="md:hidden text-gray-500 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                        </svg>
                    </button>
                    <div class="flex items-center">
                        <span class="text-xl font-bold text-primary">Shikshak</span>
                        <span class="ml-2 px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded">Pro ✨</span>
                    </div>
                </div>
                
                <div class="flex-1 max-w-md mx-4">
                    <div class="relative">
                        <input type="text" placeholder="Search..." class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 ease-out">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-2.5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                </div>
                
                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                            </svg>
                        </button>
                        <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full animate-pulse">3</span>
                    </div>
                    <div class="relative">
                        <button class="flex items-center space-x-1 text-gray-700 hover:text-gray-900 focus:outline-none">
                            <span>John Doe</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                    <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                        </svg>
                    </button>
                </div>
            </div>
        </header>

        <div class="flex flex-1 overflow-hidden">
            <!-- Sidebar -->
            <aside id="sidebar" class="site-sidebar">
                <nav class="flex-1 py-4">
                    <a href="dashboard.html" class="sidebar-item active">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
                        </svg>
                        Dashboard
                    </a>
                    <a href="meet-manage.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                        </svg>
                        Meetings
                    </a>
                    <a href="agent-manage.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                        </svg>
                        Agents
                    </a>
                    <a href="chat.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                        </svg>
                        Chat
                    </a>
                    <a href="post-summary.html" class="sidebar-item">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        Reports
                    </a>
                    <div class="px-4 py-6">
                        <a href="upgrade.html" class="flex items-center px-4 py-3 text-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100 card-hover">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z" />
                            </svg>
                            <span class="font-medium">Upgrade Plan</span>
                        </a>
                    </div>
                </nav>
            </aside>

            <!-- Overlay for mobile sidebar -->
            <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-0 md:hidden hidden"></div>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-y-auto p-4 md:p-6">
                <div class="max-w-6xl mx-auto">
                    <h1 class="text-2xl font-bold text-gray-800 mb-6">Dashboard Overview</h1>
                    
                    <!-- Stats Cards -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div class="bg-white p-6 rounded-lg shadow-sm card-hover">
                            <div class="flex items-center">
                                <div class="p-3 rounded-full bg-blue-100 text-primary mr-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-gray-500">MEETINGS</p>
                                    <p class="text-2xl font-bold text-gray-800">24</p>
                                    <p class="text-xs text-gray-500">This Month</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-white p-6 rounded-lg shadow-sm card-hover">
                            <div class="flex items-center">
                                <div class="p-3 rounded-full bg-green-100 text-green-500 mr-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-gray-500">AGENTS</p>
                                    <p class="text-2xl font-bold text-gray-800">8</p>
                                    <p class="text-xs text-gray-500">Active</p>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-white p-6 rounded-lg shadow-sm card-hover">
                            <div class="flex items-center">
                                <div class="p-3 rounded-full bg-purple-100 text-purple-500 mr-4">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                                    </svg>
                                </div>
                                <div>
                                    <p class="text-sm font-medium text-gray-500">USAGE</p>
                                    <p class="text-2xl font-bold text-gray-800">85%</p>
                                    <p class="text-xs text-gray-500">Used This Month</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Recent Meetings Section -->
                    <div class="bg-white rounded-lg shadow-sm overflow-hidden">
                        <div class="px-6 py-4 border-b border-gray-200">
                            <h2 class="text-lg font-semibold text-gray-800">Recent Meetings</h2>
                        </div>
                        <ul class="divide-y divide-gray-200">
                            <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-4">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="min-w-0 flex-1">
                                        <p class="text-sm font-medium text-gray-900 truncate">Startup Coaching with Hustle Coach</p>
                                    </div>
                                    <div>
                                        <button class="text-blue-600 hover:text-blue-900 text-sm font-medium">
                                            Join
                                        </button>
                                    </div>
                                </div>
                            </li>
                            <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 rounded-full bg-green-100 flex items-center justify-center mr-4">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                        </svg>
                                    </div>
                                    <div class="min-w-0 flex-1">
                                        <p class="text-sm font-medium text-gray-900 truncate">Language Practice with French Tutor</p>
                                    </div>
                                    <div>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Completed
                                        </span>
                                    </div>
                                </div>
                            </li>
                            <li class="px-6 py-4 hover:bg-gray-50 transition-colors duration-150">
                                <div class="flex items-center">
                                    <div class="flex-shrink-0 h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center mr-4">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                    <div class="min-w-0 flex-1">
                                        <p class="text-sm font-medium text-gray-900 truncate">Interview Prep with Career Coach</p>
                                    </div>
                                    <div>
                                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                            Completed
                                        </span>
                                    </div>
                                </div>
                            </li>
                        </ul>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Simple JavaScript for sidebar toggle on mobile
        document.addEventListener('DOMContentLoaded', function () {
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');

            if (sidebarToggle && sidebar && overlay) {
                sidebarToggle.addEventListener('click', function () {
                    sidebar.classList.toggle('-translate-x-full');
                    overlay.classList.toggle('hidden');
                });

                overlay.addEventListener('click', function () {
                    sidebar.classList.add('-translate-x-full');
                    overlay.classList.add('hidden');
                });
            }
        });
    </script>
</body>
</html>
</file>

<file path="proto/live call session/app.js">
// Discord-Style Video Call Interface with Enhanced Features
class DiscordVideoInterface {
    constructor() {
        this.state = {
            isMuted: false,
            hasVideo: true,
            isScreenSharing: false,
            chatOpen: false,
            appsOpen: false,
            isRecording: true,
            connectionQuality: 'excellent',
            currentTime: { minutes: 15, seconds: 32 },
            activeTab: 'chat'
        };
        
        this.init();
    }
    
    init() {
        this.bindEvents();
        this.startTimer();
        this.initializeTranscript();
        this.loadExistingMessages();
    }
    
    bindEvents() {
        // Control buttons - ensure clean event handling
        const muteBtn = document.getElementById('muteBtn');
        if (muteBtn) {
            muteBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleMute();
            });
        }
        
        const videoBtn = document.getElementById('videoBtn');
        if (videoBtn) {
            videoBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleVideo();
            });
        }
        
        const shareBtn = document.getElementById('shareBtn');
        if (shareBtn) {
            shareBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openScreenShareModal();
            });
        }
        
        const chatBtn = document.getElementById('chatBtn');
        if (chatBtn) {
            chatBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Chat button clicked'); // Debug log
                this.toggleChat();
            });
        }
        
        const appsBtn = document.getElementById('appsBtn');
        if (appsBtn) {
            appsBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Apps button clicked'); // Debug log
                this.toggleApps();
            });
        }
        
        const endCallBtn = document.getElementById('endCallBtn');
        if (endCallBtn) {
            endCallBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.endCall();
            });
        }
        
        // Chat panel controls
        const closeChatBtn = document.getElementById('closeChatBtn');
        if (closeChatBtn) {
            closeChatBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleChat();
            });
        }
        
        // Tab switching - fix the tab switching logic
        const chatTab = document.getElementById('chatTab');
        if (chatTab) {
            chatTab.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Chat tab clicked'); // Debug log
                this.switchTab('chat');
            });
        }
        
        const transcriptTab = document.getElementById('transcriptTab');
        if (transcriptTab) {
            transcriptTab.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                console.log('Transcript tab clicked'); // Debug log
                this.switchTab('transcript');
            });
        }
        
        // Chat functionality
        const sendBtn = document.getElementById('sendBtn');
        if (sendBtn) {
            sendBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.sendMessage();
            });
        }
        
        const chatInput = document.getElementById('chatInput');
        if (chatInput) {
            chatInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    this.sendMessage();
                }
            });
        }
        
        const uploadBtn = document.getElementById('uploadBtn');
        if (uploadBtn) {
            uploadBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.triggerFileUpload();
            });
        }
        
        const fileInput = document.getElementById('fileInput');
        if (fileInput) {
            fileInput.addEventListener('change', (e) => this.handleFileUpload(e));
        }
        
        // Screen share modal
        const closeShareModal = document.getElementById('closeShareModal');
        if (closeShareModal) {
            closeShareModal.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.closeScreenShareModal();
            });
        }
        
        document.querySelectorAll('.share-option').forEach(option => {
            option.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.selectShareOption(e);
            });
        });
        
        // Apps modal
        const closeAppsModal = document.getElementById('closeAppsModal');
        if (closeAppsModal) {
            closeAppsModal.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.toggleApps();
            });
        }
        
        document.querySelectorAll('.discord-app-block').forEach(block => {
            block.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.openApp(e);
            });
        });
        
        // Transcript interactions
        document.querySelectorAll('.transcript-message').forEach(msg => {
            msg.addEventListener('click', (e) => this.highlightTranscriptMessage(e));
        });
        
        // Keyboard shortcuts
        document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
        
        // Close modals on outside click - but not panels
        const screenShareModal = document.getElementById('screenShareModal');
        if (screenShareModal) {
            screenShareModal.addEventListener('click', (e) => {
                if (e.target.id === 'screenShareModal') {
                    this.closeScreenShareModal();
                }
            });
        }
    }
    
    // Tab Management - Fixed implementation
    switchTab(tabName) {
        console.log('Switching to tab:', tabName); // Debug log
        this.state.activeTab = tabName;
        
        // Update tab buttons
        document.querySelectorAll('.chat-tab').forEach(tab => {
            tab.classList.remove('active');
        });
        
        const activeTabBtn = document.querySelector(`[data-tab="${tabName}"]`);
        if (activeTabBtn) {
            activeTabBtn.classList.add('active');
        }
        
        // Update tab content
        document.querySelectorAll('.tab-content').forEach(content => {
            content.classList.remove('active');
        });
        
        const activeContent = document.querySelector(`.tab-content[data-tab="${tabName}"]`);
        if (activeContent) {
            activeContent.classList.add('active');
        }
        
        // Focus chat input when switching to chat tab
        if (tabName === 'chat') {
            setTimeout(() => {
                const chatInput = document.getElementById('chatInput');
                if (chatInput) chatInput.focus();
            }, 100);
        }
        
        this.showNotification(`📋 Switched to ${tabName === 'chat' ? 'Chat' : 'AI Transcript'}`);
    }
    
    // Control Functions - Fixed implementations
    toggleMute() {
        this.state.isMuted = !this.state.isMuted;
        const muteBtn = document.getElementById('muteBtn');
        const icon = muteBtn?.querySelector('.material-symbols-outlined');
        
        if (this.state.isMuted) {
            muteBtn?.classList.add('muted');
            if (icon) icon.textContent = 'mic_off';
            if (muteBtn) muteBtn.title = 'Unmute';
        } else {
            muteBtn?.classList.remove('muted');
            if (icon) icon.textContent = 'mic';
            if (muteBtn) muteBtn.title = 'Mute';
        }
        
        // Update user video audio indicator
        const audioStatus = document.querySelector('.user-video .audio-status');
        if (audioStatus) {
            const audioIcon = audioStatus.querySelector('.material-symbols-outlined');
            if (audioIcon) {
                audioIcon.textContent = this.state.isMuted ? 'mic_off' : 'mic';
            }
        }
        
        this.showNotification(this.state.isMuted ? '🔇 Microphone muted' : '🎤 Microphone unmuted');
    }
    
    toggleVideo() {
        this.state.hasVideo = !this.state.hasVideo;
        const videoBtn = document.getElementById('videoBtn');
        const icon = videoBtn?.querySelector('.material-symbols-outlined');
        
        if (!this.state.hasVideo) {
            videoBtn?.classList.add('active');
            if (icon) icon.textContent = 'videocam_off';
            if (videoBtn) videoBtn.title = 'Turn on camera';
        } else {
            videoBtn?.classList.remove('active');
            if (icon) icon.textContent = 'videocam';
            if (videoBtn) videoBtn.title = 'Turn off camera';
        }
        
        this.showNotification(this.state.hasVideo ? '📹 Camera turned on' : '📹 Camera turned off');
    }
    
    toggleChat() {
        console.log('Toggle chat called, current state:', this.state.chatOpen); // Debug log
        this.state.chatOpen = !this.state.chatOpen;
        const chatPanel = document.getElementById('chatPanel');
        const chatBtn = document.getElementById('chatBtn');
        
        if (this.state.chatOpen) {
            console.log('Opening chat panel'); // Debug log
            if (chatPanel) chatPanel.classList.remove('hidden');
            if (chatBtn) chatBtn.classList.add('active');
            // Close apps if open
            if (this.state.appsOpen) this.toggleApps();
            // Focus on chat input after animation
            setTimeout(() => {
                if (this.state.activeTab === 'chat') {
                    const chatInput = document.getElementById('chatInput');
                    if (chatInput) chatInput.focus();
                }
            }, 300);
            this.showNotification('💬 Chat panel opened');
        } else {
            console.log('Closing chat panel'); // Debug log
            if (chatPanel) chatPanel.classList.add('hidden');
            if (chatBtn) chatBtn.classList.remove('active');
            this.showNotification('💬 Chat panel closed');
        }
    }
    
    toggleApps() {
        console.log('Toggle apps called, current state:', this.state.appsOpen); // Debug log
        this.state.appsOpen = !this.state.appsOpen;
        const appsModal = document.getElementById('appsModal');
        const appsBtn = document.getElementById('appsBtn');
        
        if (this.state.appsOpen) {
            console.log('Opening apps modal'); // Debug log
            if (appsModal) appsModal.classList.remove('hidden');
            if (appsBtn) appsBtn.classList.add('active');
            this.showNotification('🎯 Apps panel opened');
        } else {
            console.log('Closing apps modal'); // Debug log
            if (appsModal) appsModal.classList.add('hidden');
            if (appsBtn) appsBtn.classList.remove('active');
            this.showNotification('🎯 Apps panel closed');
        }
    }
    
    openScreenShareModal() {
        const modal = document.getElementById('screenShareModal');
        if (modal) modal.classList.remove('hidden');
    }
    
    closeScreenShareModal() {
        const modal = document.getElementById('screenShareModal');
        if (modal) modal.classList.add('hidden');
    }
    
    selectShareOption(e) {
        const option = e.currentTarget;
        const type = option.dataset.type;
        
        // Simulate screen sharing start
        this.state.isScreenSharing = true;
        const shareBtn = document.getElementById('shareBtn');
        if (shareBtn) {
            shareBtn.classList.add('active');
            shareBtn.title = 'Stop sharing';
            const shareIcon = shareBtn.querySelector('.material-symbols-outlined');
            if (shareIcon) shareIcon.textContent = 'stop_screen_share';
        }
        
        this.closeScreenShareModal();
        this.showNotification(`🖥️ Started sharing ${type === 'entire' ? 'entire screen' : type === 'window' ? 'application window' : 'browser tab'}`);
        
        // Auto-stop sharing after demo
        setTimeout(() => {
            this.stopScreenShare();
        }, 8000);
    }
    
    stopScreenShare() {
        this.state.isScreenSharing = false;
        const shareBtn = document.getElementById('shareBtn');
        if (shareBtn) {
            shareBtn.classList.remove('active');
            shareBtn.title = 'Share screen';
            const shareIcon = shareBtn.querySelector('.material-symbols-outlined');
            if (shareIcon) shareIcon.textContent = 'screen_share';
        }
        this.showNotification('🖥️ Stopped screen sharing');
    }
    
    endCall() {
        if (confirm('Are you sure you want to end the call?')) {
            this.showNotification('📞 Call ended. Thank you for using our platform!');
            // In a real app, this would redirect or close the window
            setTimeout(() => {
                document.body.innerHTML = `
                    <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100vh; font-size: 1.5rem; color: var(--color-text); background-color: var(--color-background); text-align: center; gap: 20px;">
                        <div style="font-size: 3rem;">📞</div>
                        <div>Call ended</div>
                        <div style="font-size: 1rem; color: var(--color-text-secondary);">You can close this window</div>
                    </div>
                `;
            }, 2000);
        }
    }
    
    // Chat Functions
    sendMessage() {
        const chatInput = document.getElementById('chatInput');
        const message = chatInput?.value.trim();
        
        if (!message) return;
        
        // Check if it's a @note command
        if (message.startsWith('@note ')) {
            this.handleNoteCommand(message);
        } else {
            // Regular chat message
            this.addChatMessage('user', 'John Doe', message, null);
            this.simulateAIResponse();
        }
        
        if (chatInput) chatInput.value = '';
    }
    
    handleNoteCommand(message) {
        // Extract note content after @note
        const noteContent = message.substring(6).trim(); // Remove '@note ' prefix
        
        if (!noteContent) {
            this.showNotification('❌ Note cannot be empty. Use: @note [your note content]');
            return;
        }
        
        const timestamp = this.formatTimestamp(this.state.currentTime);
        this.addNoteMessage('John Doe', noteContent, timestamp);
        this.showNotification('📝 Note added with timestamp');
    }
    
    addChatMessage(type, sender, text, timestamp) {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        const messageDiv = document.createElement('div');
        messageDiv.className = `chat-message ${type}`;
        
        if (type !== 'system') {
            messageDiv.innerHTML = `
                <div class="chat-sender">${sender}</div>
                <span class="chat-text">${text}</span>
            `;
        } else {
            messageDiv.innerHTML = `<span class="chat-text">${text}</span>`;
        }
        
        chatMessages.appendChild(messageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Add animation
        messageDiv.style.opacity = '0';
        messageDiv.style.transform = 'translateY(10px)';
        setTimeout(() => {
            messageDiv.style.opacity = '1';
            messageDiv.style.transform = 'translateY(0)';
            messageDiv.style.transition = 'all 0.3s ease-out';
        }, 10);
    }
    
    addNoteMessage(sender, text, timestamp) {
        const chatMessages = document.getElementById('chatMessages');
        if (!chatMessages) return;
        
        const noteDiv = document.createElement('div');
        noteDiv.className = 'chat-message note';
        noteDiv.innerHTML = `
            <div class="note-header">
                <span class="material-symbols-outlined">note_alt</span>
                <span class="note-sender">${sender}</span>
                <span class="note-timestamp">${timestamp}</span>
            </div>
            <span class="chat-text">${text}</span>
        `;
        
        chatMessages.appendChild(noteDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
        
        // Add animation
        noteDiv.style.opacity = '0';
        noteDiv.style.transform = 'translateY(10px)';
        setTimeout(() => {
            noteDiv.style.opacity = '1';
            noteDiv.style.transform = 'translateY(0)';
            noteDiv.style.transition = 'all 0.3s ease-out';
        }, 10);
    }
    
    simulateAIResponse() {
        setTimeout(() => {
            const responses = [
                "That's an excellent point! Let me elaborate on that. 🎯",
                "I love your entrepreneurial mindset! Here's what I'd suggest... 🚀",
                "Great question! This is exactly the kind of thinking that leads to success. 💡",
                "You're absolutely on the right track. Let's dive deeper into this concept. 📈",
                "Fantastic insight! This shows you understand the fundamentals. 💪",
                "That's the mindset of a true hustler! Keep that energy going! ⚡"
            ];
            const randomResponse = responses[Math.floor(Math.random() * responses.length)];
            this.addChatMessage('agent', 'Hustle Coach', randomResponse, null);
        }, 1000 + Math.random() * 2000);
    }
    
    triggerFileUpload() {
        const fileInput = document.getElementById('fileInput');
        if (fileInput) fileInput.click();
    }
    
    handleFileUpload(e) {
        const files = Array.from(e.target.files);
        
        files.forEach(file => {
            const fileType = file.type.startsWith('image/') ? '🖼️' : '📁';
            this.addChatMessage('user', 'John Doe', `${fileType} Shared file: ${file.name}`, null);
        });
        
        // Reset file input
        e.target.value = '';
        
        if (files.length > 0) {
            this.showNotification(`📎 ${files.length} file(s) shared successfully`);
        }
    }
    
    // Apps Functions
    openApp(e) {
        const appBlock = e.currentTarget;
        const appName = appBlock.querySelector('.app-name')?.textContent;
        const appIcon = appBlock.querySelector('.app-icon')?.textContent;
        
        if (appName) {
            this.showNotification(`${appIcon} Opening ${appName}...`);
            this.toggleApps(); // Close apps modal
            
            // In a real app, this would open the actual application
            setTimeout(() => {
                this.showNotification(`✅ ${appName} is now available in a new window`);
            }, 1500);
        }
    }
    
    // Transcript Functions
    initializeTranscript() {
        const transcriptData = [
            {
                timestamp: "00:13:45",
                speaker: "Hustle Coach",
                text: "Don't just build another me-too product. Find the gap that makes people say 'How did I live without this?' That's your golden ticket to unicorn status!",
                id: "t_3"
            },
            {
                timestamp: "00:14:20",
                speaker: "John",
                text: "How do I validate if there's real market demand?",
                id: "t_4"
            },
            {
                timestamp: "00:14:25",
                speaker: "Hustle Coach",
                text: "Get out of the building! Talk to 100 potential customers. If 80% say they'd pay for your solution, you're onto something. If not, pivot faster than a startup running out of runway!",
                id: "t_5"
            }
        ];
        
        const transcriptContent = document.getElementById('transcriptContent');
        if (!transcriptContent) return;
        
        // Add remaining transcript messages with delay
        transcriptData.forEach((item, index) => {
            setTimeout(() => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'transcript-message';
                messageDiv.dataset.timestamp = item.timestamp;
                messageDiv.dataset.id = item.id;
                messageDiv.innerHTML = `
                    <span class="timestamp">${item.timestamp}</span>
                    <span class="speaker-name ${item.speaker === 'John' ? 'user' : 'agent'}">${item.speaker}:</span>
                    <span class="message-text">"${item.text}"</span>
                `;
                
                // Add click handler
                messageDiv.addEventListener('click', (e) => this.highlightTranscriptMessage(e));
                
                transcriptContent.appendChild(messageDiv);
                transcriptContent.scrollTop = transcriptContent.scrollHeight;
            }, (index + 1) * 4000);
        });
    }
    
    highlightTranscriptMessage(e) {
        // Remove previous highlights
        document.querySelectorAll('.transcript-message').forEach(msg => {
            msg.style.backgroundColor = '';
            msg.style.color = '';
        });
        
        // Highlight selected message
        const message = e.currentTarget;
        message.style.backgroundColor = 'var(--color-primary)';
        message.style.color = 'var(--color-btn-primary-text)';
        
        const timestamp = message.dataset.timestamp;
        this.showNotification(`🎯 Selected transcript at ${timestamp}`);
        
        // Remove highlight after 3 seconds
        setTimeout(() => {
            message.style.backgroundColor = '';
            message.style.color = '';
        }, 3000);
    }
    
    // Load existing messages
    loadExistingMessages() {
        // This simulates loading existing chat messages and notes
        setTimeout(() => {
            // Add some activity to make it feel live
            this.simulateIncomingTranscript();
        }, 2000);
    }
    
    simulateIncomingTranscript() {
        const newTranscripts = [
            {
                timestamp: this.formatTimestamp(this.state.currentTime),
                speaker: "Hustle Coach",
                text: "Remember, execution beats perfection every time. Start building, start testing, start learning!"
            }
        ];
        
        setTimeout(() => {
            const transcriptContent = document.getElementById('transcriptContent');
            if (!transcriptContent) return;
            
            newTranscripts.forEach(item => {
                const messageDiv = document.createElement('div');
                messageDiv.className = 'transcript-message';
                messageDiv.innerHTML = `
                    <span class="timestamp">${item.timestamp}</span>
                    <span class="speaker-name agent">${item.speaker}:</span>
                    <span class="message-text">"${item.text}"</span>
                `;
                
                messageDiv.addEventListener('click', (e) => this.highlightTranscriptMessage(e));
                transcriptContent.appendChild(messageDiv);
                transcriptContent.scrollTop = transcriptContent.scrollHeight;
            });
        }, 5000);
    }
    
    // Timer Functions
    startTimer() {
        setInterval(() => {
            this.state.currentTime.seconds++;
            if (this.state.currentTime.seconds >= 60) {
                this.state.currentTime.seconds = 0;
                this.state.currentTime.minutes++;
            }
            
            const timerDisplay = document.querySelector('.session-timer');
            if (timerDisplay) {
                timerDisplay.textContent = this.formatTimestamp(this.state.currentTime);
            }
            
            // Milestone celebrations
            if (this.state.currentTime.seconds === 0 && this.state.currentTime.minutes % 20 === 0) {
                this.showNotification(`🎉 ${this.state.currentTime.minutes} minutes milestone reached!`);
            }
        }, 1000);
    }
    
    formatTimestamp(time) {
        const minutes = String(time.minutes).padStart(2, '0');
        const seconds = String(time.seconds).padStart(2, '0');
        return `00:${minutes}:${seconds}`;
    }
    
    // Keyboard Shortcuts
    handleKeyboardShortcuts(e) {
        // Only handle shortcuts if not typing in an input
        if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;
        
        switch (e.key.toLowerCase()) {
            case 'm':
                e.preventDefault();
                this.toggleMute();
                break;
            case 'v':
                e.preventDefault();
                this.toggleVideo();
                break;
            case 'c':
                e.preventDefault();
                this.toggleChat();
                break;
            case 'a':
                e.preventDefault();
                this.toggleApps();
                break;
            case 's':
                e.preventDefault();
                this.openScreenShareModal();
                break;
            case '1':
                e.preventDefault();
                if (this.state.chatOpen) this.switchTab('chat');
                break;
            case '2':
                e.preventDefault();
                if (this.state.chatOpen) this.switchTab('transcript');
                break;
            case 'escape':
                e.preventDefault();
                // Close any open panels or modals
                if (this.state.chatOpen) this.toggleChat();
                if (this.state.appsOpen) this.toggleApps();
                this.closeScreenShareModal();
                break;
        }
    }
    
    // Utility Functions
    showNotification(message) {
        // Create notification element
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background-color: var(--color-surface);
            color: var(--color-text);
            padding: 12px 16px;
            border-radius: 12px;
            border: 1px solid var(--color-border);
            box-shadow: var(--shadow-lg);
            z-index: 4000;
            font-size: 14px;
            font-weight: 500;
            max-width: 320px;
            transform: translateX(100%);
            transition: all 0.3s cubic-bezier(0.16, 1, 0.3, 1);
            backdrop-filter: blur(10px);
        `;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        // Animate in
        setTimeout(() => {
            notification.style.transform = 'translateX(0)';
        }, 100);
        
        // Auto remove
        setTimeout(() => {
            notification.style.transform = 'translateX(100%)';
            notification.style.opacity = '0';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 4000);
    }
    
    updateConnectionQuality() {
        const qualities = ['excellent', 'good', 'poor'];
        const randomQuality = qualities[Math.floor(Math.random() * qualities.length)];
        
        const indicator = document.getElementById('connectionIndicator');
        if (indicator) {
            indicator.className = `connection-indicator ${randomQuality}`;
            
            const icon = indicator.querySelector('.material-symbols-outlined');
            if (icon) {
                switch (randomQuality) {
                    case 'excellent':
                        icon.textContent = 'signal_cellular_4_bar';
                        break;
                    case 'good':
                        icon.textContent = 'signal_cellular_3_bar';
                        break;
                    case 'poor':
                        icon.textContent = 'signal_cellular_1_bar';
                        break;
                }
            }
        }
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM loaded, initializing app'); // Debug log
    const app = new DiscordVideoInterface();
    
    // Make app globally available for debugging
    window.discordApp = app;
    
    // Simulate connection quality changes
    setInterval(() => {
        app.updateConnectionQuality();
    }, 15000);
    
    // Welcome message sequence
    setTimeout(() => {
        app.showNotification('🚀 Welcome to your Discord-style coaching session!');
    }, 1000);
    
    setTimeout(() => {
        app.showNotification('💡 Use @note [text] to create timestamped notes');
    }, 3000);
    
    setTimeout(() => {
        app.showNotification('⌨️ Press C for chat, A for apps, M to mute');
    }, 5000);
});
</file>

<file path="proto/live call session/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Startup Coaching Session</title>
    <link rel="stylesheet" href="style.css">
    <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" rel="stylesheet">
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <div class="recording-indicator">
                <span class="recording-dot"></span>
                <span class="recording-text">REC</span>
            </div>
            <h1 class="session-title">Startup Coaching Session</h1>
            <div class="session-timer">00:15:32</div>
        </div>
        <div class="header-right">
            <button class="btn-icon" title="Settings">
                <span class="material-symbols-outlined">settings</span>
            </button>
            <button class="btn-icon" title="Minimize">
                <span class="material-symbols-outlined">minimize</span>
            </button>
            <button class="btn-icon btn-close" title="Close">
                <span class="material-symbols-outlined">close</span>
            </button>
        </div>
    </header>

    <!-- Main Content -->
    <main class="main-content">
        <!-- Video Area -->
        <div class="video-container">
            <div class="discord-video-grid">
                <div class="discord-video-frame user-video">
                    <div class="video-content">
                        <div class="avatar-large">👤</div>
                    </div>
                    <div class="discord-video-overlay">
                        <div class="participant-info">
                            <span class="participant-name">John Doe</span>
                            <div class="audio-status">
                                <span class="material-symbols-outlined">mic</span>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="discord-video-frame agent-video speaking">
                    <div class="video-content">
                        <div class="avatar-large">🤖</div>
                    </div>
                    <div class="discord-video-overlay">
                        <div class="participant-info">
                            <span class="participant-name">Hustle Coach</span>
                            <div class="ai-badge">AI</div>
                        </div>
                        <div class="speaking-indicator">
                            <div class="speaking-ring"></div>
                            <div class="wave-bars">
                                <div class="wave-bar"></div>
                                <div class="wave-bar"></div>
                                <div class="wave-bar"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Control Bar -->
        <div class="control-bar">
            <div class="control-group">
                <button class="discord-control-btn" id="muteBtn" title="Mute">
                    <span class="material-symbols-outlined">mic</span>
                </button>
                <button class="discord-control-btn" id="videoBtn" title="Turn off camera">
                    <span class="material-symbols-outlined">videocam</span>
                </button>
                <button class="discord-control-btn" id="shareBtn" title="Share screen">
                    <span class="material-symbols-outlined">screen_share</span>
                </button>
            </div>
            
            <div class="control-group">
                <button class="discord-control-btn" id="chatBtn" title="Chat">
                    <span class="material-symbols-outlined">chat</span>
                </button>
                <button class="discord-control-btn apps-btn" id="appsBtn" title="Apps">
                    <span class="material-symbols-outlined">apps</span>
                </button>
            </div>
            
            <div class="control-group">
                <button class="discord-control-btn end-call" id="endCallBtn" title="End call">
                    <span class="material-symbols-outlined">call_end</span>
                </button>
            </div>
        </div>
    </main>

    <!-- Enhanced Chat Panel with Tabs -->
    <div class="enhanced-chat-panel hidden" id="chatPanel">
        <div class="chat-panel-header">
            <div class="chat-tabs">
                <button class="chat-tab active" data-tab="chat" id="chatTab">
                    <span class="material-symbols-outlined">chat</span>
                    Chat
                </button>
                <button class="chat-tab" data-tab="transcript" id="transcriptTab">
                    <span class="material-symbols-outlined">subtitles</span>
                    AI Transcript
                </button>
            </div>
            <button class="btn-icon" id="closeChatBtn">
                <span class="material-symbols-outlined">close</span>
            </button>
        </div>

        <!-- Chat Content -->
        <div class="tab-content active" data-tab="chat">
            <div class="chat-messages" id="chatMessages">
                <div class="chat-message system">
                    <span class="chat-text">Meeting started. Recording enabled.</span>
                </div>
                <div class="chat-message user">
                    <div class="chat-sender">John Doe</div>
                    <span class="chat-text">Ready to learn some startup secrets! 🚀</span>
                </div>
                <div class="chat-message agent">
                    <div class="chat-sender">Hustle Coach</div>
                    <span class="chat-text">Let's disrupt your thinking and scale your mindset! 💪</span>
                </div>
                <div class="chat-message note">
                    <div class="note-header">
                        <span class="material-symbols-outlined">note_alt</span>
                        <span class="note-sender">John Doe</span>
                        <span class="note-timestamp">00:12:18</span>
                    </div>
                    <span class="chat-text">Key success factors: Market potential, Unique value prop, Scalability</span>
                </div>
                <div class="chat-message note">
                    <div class="note-header">
                        <span class="material-symbols-outlined">note_alt</span>
                        <span class="note-sender">John Doe</span>
                        <span class="note-timestamp">00:14:25</span>
                    </div>
                    <span class="chat-text">Validation strategy: Talk to 100 potential customers, need 80% positive response</span>
                </div>
            </div>
            <div class="chat-input-container">
                <button class="btn-icon upload-btn" id="uploadBtn" title="Upload file">
                    <span class="material-symbols-outlined">add</span>
                </button>
                <input type="text" class="chat-input" placeholder="Send a message or use @note for timestamped notes..." id="chatInput">
                <button class="btn-icon send-btn" id="sendBtn" title="Send message">
                    <span class="material-symbols-outlined">send</span>
                </button>
            </div>
        </div>

        <!-- Transcript Content -->
        <div class="tab-content" data-tab="transcript">
            <div class="transcript-messages" id="transcriptContent">
                <div class="transcript-message" data-timestamp="00:12:15" data-id="t_1">
                    <span class="timestamp">00:12:15</span>
                    <span class="speaker-name user">John:</span>
                    <span class="message-text">"What makes a good startup idea?"</span>
                </div>
                <div class="transcript-message" data-timestamp="00:12:18" data-id="t_2">
                    <span class="timestamp">00:12:18</span>
                    <span class="speaker-name agent">Hustle Coach:</span>
                    <span class="message-text">"A killer startup idea boils down to three things: massive market potential, unique value proposition, and scalability. You want a problem that's begging for disruption!"</span>
                </div>
            </div>
        </div>

        <input type="file" class="file-input hidden" id="fileInput" multiple accept="image/*,.pdf,.doc,.docx,.txt">
    </div>

    <!-- Screen Share Modal -->
    <div class="modal hidden" id="screenShareModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Share Screen</h3>
                <button class="btn-icon" id="closeShareModal">
                    <span class="material-symbols-outlined">close</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="share-options">
                    <div class="share-option" data-type="entire">
                        <div class="share-icon">
                            <span class="material-symbols-outlined">desktop_windows</span>
                        </div>
                        <div class="share-label">Entire Screen</div>
                    </div>
                    <div class="share-option" data-type="window">
                        <div class="share-icon">
                            <span class="material-symbols-outlined">web_asset</span>
                        </div>
                        <div class="share-label">Application Window</div>
                    </div>
                    <div class="share-option" data-type="tab">
                        <div class="share-icon">
                            <span class="material-symbols-outlined">tab</span>
                        </div>
                        <div class="share-label">Chrome Tab</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Discord-Style Apps Modal -->
    <div class="discord-apps-modal hidden" id="appsModal">
        <div class="apps-modal-content">
            <div class="apps-modal-header">
                <h3>Apps</h3>
                <button class="btn-icon" id="closeAppsModal">
                    <span class="material-symbols-outlined">close</span>
                </button>
            </div>
            <div class="discord-apps-grid">
                <div class="discord-app-block" data-app="pitch-deck">
                    <div class="app-icon">📊</div>
                    <div class="app-name">Pitch Deck Analyzer</div>
                </div>
                <div class="discord-app-block" data-app="business-model">
                    <div class="app-icon">💼</div>
                    <div class="app-name">Business Model Canvas</div>
                </div>
                <div class="discord-app-block" data-app="market-research">
                    <div class="app-icon">🎯</div>
                    <div class="app-name">Market Research Tools</div>
                </div>
                <div class="discord-app-block" data-app="financial">
                    <div class="app-icon">📈</div>
                    <div class="app-name">Financial Projections</div>
                </div>
                <div class="discord-app-block" data-app="investor">
                    <div class="app-icon">🤝</div>
                    <div class="app-name">Investor Matching</div>
                </div>
                <div class="discord-app-block" data-app="legal">
                    <div class="app-icon">⚖️</div>
                    <div class="app-name">Legal Assistant</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Connection Quality Indicator -->
    <div class="connection-indicator excellent" id="connectionIndicator">
        <span class="material-symbols-outlined">signal_cellular_4_bar</span>
    </div>

    <script src="app.js"></script>
</body>
</html>
</file>

<file path="proto/live call session/style.css">
:root {
  /* Primitive Color Tokens */
  --color-white: rgba(255, 255, 255, 1);
  --color-black: rgba(0, 0, 0, 1);
  --color-cream-50: rgba(252, 252, 249, 1);
  --color-cream-100: rgba(255, 255, 253, 1);
  --color-gray-200: rgba(245, 245, 245, 1);
  --color-gray-300: rgba(167, 169, 169, 1);
  --color-gray-400: rgba(119, 124, 124, 1);
  --color-slate-500: rgba(98, 108, 113, 1);
  --color-brown-600: rgba(94, 82, 64, 1);
  --color-charcoal-700: rgba(31, 33, 33, 1);
  --color-charcoal-800: rgba(38, 40, 40, 1);
  --color-slate-900: rgba(19, 52, 59, 1);
  --color-teal-300: rgba(50, 184, 198, 1);
  --color-teal-400: rgba(45, 166, 178, 1);
  --color-teal-500: rgba(33, 128, 141, 1);
  --color-teal-600: rgba(29, 116, 128, 1);
  --color-teal-700: rgba(26, 104, 115, 1);
  --color-teal-800: rgba(41, 150, 161, 1);
  --color-red-400: rgba(255, 84, 89, 1);
  --color-red-500: rgba(192, 21, 47, 1);
  --color-orange-400: rgba(230, 129, 97, 1);
  --color-orange-500: rgba(168, 75, 47, 1);

  /* RGB versions for opacity control */
  --color-brown-600-rgb: 94, 82, 64;
  --color-teal-500-rgb: 33, 128, 141;
  --color-slate-900-rgb: 19, 52, 59;
  --color-slate-500-rgb: 98, 108, 113;
  --color-red-500-rgb: 192, 21, 47;
  --color-red-400-rgb: 255, 84, 89;
  --color-orange-500-rgb: 168, 75, 47;
  --color-orange-400-rgb: 230, 129, 97;

  /* Background color tokens (Light Mode) */
  --color-bg-1: rgba(59, 130, 246, 0.08); /* Light blue */
  --color-bg-2: rgba(245, 158, 11, 0.08); /* Light yellow */
  --color-bg-3: rgba(34, 197, 94, 0.08); /* Light green */
  --color-bg-4: rgba(239, 68, 68, 0.08); /* Light red */
  --color-bg-5: rgba(147, 51, 234, 0.08); /* Light purple */
  --color-bg-6: rgba(249, 115, 22, 0.08); /* Light orange */
  --color-bg-7: rgba(236, 72, 153, 0.08); /* Light pink */
  --color-bg-8: rgba(6, 182, 212, 0.08); /* Light cyan */

  /* Semantic Color Tokens (Light Mode) */
  --color-background: var(--color-cream-50);
  --color-surface: var(--color-cream-100);
  --color-text: var(--color-slate-900);
  --color-text-secondary: var(--color-slate-500);
  --color-primary: var(--color-teal-500);
  --color-primary-hover: var(--color-teal-600);
  --color-primary-active: var(--color-teal-700);
  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  --color-btn-primary-text: var(--color-cream-50);
  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  --color-error: var(--color-red-500);
  --color-success: var(--color-teal-500);
  --color-warning: var(--color-orange-500);
  --color-info: var(--color-slate-500);
  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);
  --color-select-caret: rgba(var(--color-slate-900-rgb), 0.8);

  /* Common style patterns */
  --focus-ring: 0 0 0 3px var(--color-focus-ring);
  --focus-outline: 2px solid var(--color-primary);
  --status-bg-opacity: 0.15;
  --status-border-opacity: 0.25;
  --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

  /* RGB versions for opacity control */
  --color-success-rgb: 33, 128, 141;
  --color-error-rgb: 192, 21, 47;
  --color-warning-rgb: 168, 75, 47;
  --color-info-rgb: 98, 108, 113;

  /* Typography */
  --font-family-base: "FKGroteskNeue", "Geist", "Inter", -apple-system,
    BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  --font-family-mono: "Berkeley Mono", ui-monospace, SFMono-Regular, Menlo,
    Monaco, Consolas, monospace;
  --font-size-xs: 11px;
  --font-size-sm: 12px;
  --font-size-base: 14px;
  --font-size-md: 14px;
  --font-size-lg: 16px;
  --font-size-xl: 18px;
  --font-size-2xl: 20px;
  --font-size-3xl: 24px;
  --font-size-4xl: 30px;
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 550;
  --font-weight-bold: 600;
  --line-height-tight: 1.2;
  --line-height-normal: 1.5;
  --letter-spacing-tight: -0.01em;

  /* Spacing */
  --space-0: 0;
  --space-1: 1px;
  --space-2: 2px;
  --space-4: 4px;
  --space-6: 6px;
  --space-8: 8px;
  --space-10: 10px;
  --space-12: 12px;
  --space-16: 16px;
  --space-20: 20px;
  --space-24: 24px;
  --space-32: 32px;

  /* Border Radius */
  --radius-sm: 6px;
  --radius-base: 8px;
  --radius-md: 10px;
  --radius-lg: 12px;
  --radius-full: 9999px;

  /* Shadows */
  --shadow-xs: 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.04), 0 1px 2px rgba(0, 0, 0, 0.02);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.04),
    0 2px 4px -1px rgba(0, 0, 0, 0.02);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.04),
    0 4px 6px -2px rgba(0, 0, 0, 0.02);
  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.15),
    inset 0 -1px 0 rgba(0, 0, 0, 0.03);

  /* Animation */
  --duration-fast: 150ms;
  --duration-normal: 250ms;
  --ease-standard: cubic-bezier(0.16, 1, 0.3, 1);

  /* Layout */
  --container-sm: 640px;
  --container-md: 768px;
  --container-lg: 1024px;
  --container-xl: 1280px;
}

/* Dark mode colors */
@media (prefers-color-scheme: dark) {
  :root {
    /* RGB versions for opacity control (Dark Mode) */
    --color-gray-400-rgb: 119, 124, 124;
    --color-teal-300-rgb: 50, 184, 198;
    --color-gray-300-rgb: 167, 169, 169;
    --color-gray-200-rgb: 245, 245, 245;

    /* Background color tokens (Dark Mode) */
    --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
    --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
    --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
    --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
    --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
    --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
    --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
    --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
    
    /* Semantic Color Tokens (Dark Mode) */
    --color-background: var(--color-charcoal-700);
    --color-surface: var(--color-charcoal-800);
    --color-text: var(--color-gray-200);
    --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
    --color-primary: var(--color-teal-300);
    --color-primary-hover: var(--color-teal-400);
    --color-primary-active: var(--color-teal-800);
    --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
    --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
    --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
    --color-border: rgba(var(--color-gray-400-rgb), 0.3);
    --color-error: var(--color-red-400);
    --color-success: var(--color-teal-300);
    --color-warning: var(--color-orange-400);
    --color-info: var(--color-gray-300);
    --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
    --color-btn-primary-text: var(--color-slate-900);
    --color-card-border: rgba(var(--color-gray-400-rgb), 0.2);
    --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
    --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
      inset 0 -1px 0 rgba(0, 0, 0, 0.15);
    --button-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
    --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);

    /* Common style patterns - updated for dark mode */
    --focus-ring: 0 0 0 3px var(--color-focus-ring);
    --focus-outline: 2px solid var(--color-primary);
    --status-bg-opacity: 0.15;
    --status-border-opacity: 0.25;
    --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
    --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

    /* RGB versions for dark mode */
    --color-success-rgb: var(--color-teal-300-rgb);
    --color-error-rgb: var(--color-red-400-rgb);
    --color-warning-rgb: var(--color-orange-400-rgb);
    --color-info-rgb: var(--color-gray-300-rgb);
  }
}

/* Data attribute for manual theme switching */
[data-color-scheme="dark"] {
  /* RGB versions for opacity control (dark mode) */
  --color-gray-400-rgb: 119, 124, 124;
  --color-teal-300-rgb: 50, 184, 198;
  --color-gray-300-rgb: 167, 169, 169;
  --color-gray-200-rgb: 245, 245, 245;

  /* Colorful background palette - Dark Mode */
  --color-bg-1: rgba(29, 78, 216, 0.15); /* Dark blue */
  --color-bg-2: rgba(180, 83, 9, 0.15); /* Dark yellow */
  --color-bg-3: rgba(21, 128, 61, 0.15); /* Dark green */
  --color-bg-4: rgba(185, 28, 28, 0.15); /* Dark red */
  --color-bg-5: rgba(107, 33, 168, 0.15); /* Dark purple */
  --color-bg-6: rgba(194, 65, 12, 0.15); /* Dark orange */
  --color-bg-7: rgba(190, 24, 93, 0.15); /* Dark pink */
  --color-bg-8: rgba(8, 145, 178, 0.15); /* Dark cyan */
  
  /* Semantic Color Tokens (Dark Mode) */
  --color-background: var(--color-charcoal-700);
  --color-surface: var(--color-charcoal-800);
  --color-text: var(--color-gray-200);
  --color-text-secondary: rgba(var(--color-gray-300-rgb), 0.7);
  --color-primary: var(--color-teal-300);
  --color-primary-hover: var(--color-teal-400);
  --color-primary-active: var(--color-teal-800);
  --color-secondary: rgba(var(--color-gray-400-rgb), 0.15);
  --color-secondary-hover: rgba(var(--color-gray-400-rgb), 0.25);
  --color-secondary-active: rgba(var(--color-gray-400-rgb), 0.3);
  --color-border: rgba(var(--color-gray-400-rgb), 0.3);
  --color-error: var(--color-red-400);
  --color-success: var(--color-teal-300);
  --color-warning: var(--color-orange-400);
  --color-info: var(--color-gray-300);
  --color-focus-ring: rgba(var(--color-teal-300-rgb), 0.4);
  --color-btn-primary-text: var(--color-slate-900);
  --color-card-border: rgba(var(--color-gray-400-rgb), 0.15);
  --color-card-border-inner: rgba(var(--color-gray-400-rgb), 0.15);
  --shadow-inset-sm: inset 0 1px 0 rgba(255, 255, 255, 0.1),
    inset 0 -1px 0 rgba(0, 0, 0, 0.15);
  --color-border-secondary: rgba(var(--color-gray-400-rgb), 0.2);
  --color-select-caret: rgba(var(--color-gray-200-rgb), 0.8);

  /* Common style patterns - updated for dark mode */
  --focus-ring: 0 0 0 3px var(--color-focus-ring);
  --focus-outline: 2px solid var(--color-primary);
  --status-bg-opacity: 0.15;
  --status-border-opacity: 0.25;
  --select-caret-light: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23134252' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
  --select-caret-dark: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%23f5f5f5' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");

  /* RGB versions for dark mode */
  --color-success-rgb: var(--color-teal-300-rgb);
  --color-error-rgb: var(--color-red-400-rgb);
  --color-warning-rgb: var(--color-orange-400-rgb);
  --color-info-rgb: var(--color-gray-300-rgb);
}

[data-color-scheme="light"] {
  /* RGB versions for opacity control (light mode) */
  --color-brown-600-rgb: 94, 82, 64;
  --color-teal-500-rgb: 33, 128, 141;
  --color-slate-900-rgb: 19, 52, 59;
  
  /* Semantic Color Tokens (Light Mode) */
  --color-background: var(--color-cream-50);
  --color-surface: var(--color-cream-100);
  --color-text: var(--color-slate-900);
  --color-text-secondary: var(--color-slate-500);
  --color-primary: var(--color-teal-500);
  --color-primary-hover: var(--color-teal-600);
  --color-primary-active: var(--color-teal-700);
  --color-secondary: rgba(var(--color-brown-600-rgb), 0.12);
  --color-secondary-hover: rgba(var(--color-brown-600-rgb), 0.2);
  --color-secondary-active: rgba(var(--color-brown-600-rgb), 0.25);
  --color-border: rgba(var(--color-brown-600-rgb), 0.2);
  --color-btn-primary-text: var(--color-cream-50);
  --color-card-border: rgba(var(--color-brown-600-rgb), 0.12);
  --color-card-border-inner: rgba(var(--color-brown-600-rgb), 0.12);
  --color-error: var(--color-red-500);
  --color-success: var(--color-teal-500);
  --color-warning: var(--color-orange-500);
  --color-info: var(--color-slate-500);
  --color-focus-ring: rgba(var(--color-teal-500-rgb), 0.4);

  /* RGB versions for light mode */
  --color-success-rgb: var(--color-teal-500-rgb);
  --color-error-rgb: var(--color-red-500-rgb);
  --color-warning-rgb: var(--color-orange-500-rgb);
  --color-info-rgb: var(--color-slate-500-rgb);
}

/* Base styles */
html {
  font-size: var(--font-size-base);
  font-family: var(--font-family-base);
  line-height: var(--line-height-normal);
  color: var(--color-text);
  background-color: var(--color-background);
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
}

*,
*::before,
*::after {
  box-sizing: inherit;
}

/* Typography */
h1,
h2,
h3,
h4,
h5,
h6 {
  margin: 0;
  font-weight: var(--font-weight-semibold);
  line-height: var(--line-height-tight);
  color: var(--color-text);
  letter-spacing: var(--letter-spacing-tight);
}

h1 {
  font-size: var(--font-size-4xl);
}
h2 {
  font-size: var(--font-size-3xl);
}
h3 {
  font-size: var(--font-size-2xl);
}
h4 {
  font-size: var(--font-size-xl);
}
h5 {
  font-size: var(--font-size-lg);
}
h6 {
  font-size: var(--font-size-md);
}

p {
  margin: 0 0 var(--space-16) 0;
}

a {
  color: var(--color-primary);
  text-decoration: none;
  transition: color var(--duration-fast) var(--ease-standard);
}

a:hover {
  color: var(--color-primary-hover);
}

code,
pre {
  font-family: var(--font-family-mono);
  font-size: calc(var(--font-size-base) * 0.95);
  background-color: var(--color-secondary);
  border-radius: var(--radius-sm);
}

code {
  padding: var(--space-1) var(--space-4);
}

pre {
  padding: var(--space-16);
  margin: var(--space-16) 0;
  overflow: auto;
  border: 1px solid var(--color-border);
}

pre code {
  background: none;
  padding: 0;
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-8) var(--space-16);
  border-radius: var(--radius-base);
  font-size: var(--font-size-base);
  font-weight: 500;
  line-height: 1.5;
  cursor: pointer;
  transition: all var(--duration-normal) var(--ease-standard);
  border: none;
  text-decoration: none;
  position: relative;
}

.btn:focus-visible {
  outline: none;
  box-shadow: var(--focus-ring);
}

.btn--primary {
  background: var(--color-primary);
  color: var(--color-btn-primary-text);
}

.btn--primary:hover {
  background: var(--color-primary-hover);
}

.btn--primary:active {
  background: var(--color-primary-active);
}

.btn--secondary {
  background: var(--color-secondary);
  color: var(--color-text);
}

.btn--secondary:hover {
  background: var(--color-secondary-hover);
}

.btn--secondary:active {
  background: var(--color-secondary-active);
}

.btn--outline {
  background: transparent;
  border: 1px solid var(--color-border);
  color: var(--color-text);
}

.btn--outline:hover {
  background: var(--color-secondary);
}

.btn--sm {
  padding: var(--space-4) var(--space-12);
  font-size: var(--font-size-sm);
  border-radius: var(--radius-sm);
}

.btn--lg {
  padding: var(--space-10) var(--space-20);
  font-size: var(--font-size-lg);
  border-radius: var(--radius-md);
}

.btn--full-width {
  width: 100%;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Form elements */
.form-control {
  display: block;
  width: 100%;
  padding: var(--space-8) var(--space-12);
  font-size: var(--font-size-md);
  line-height: 1.5;
  color: var(--color-text);
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-base);
  transition: border-color var(--duration-fast) var(--ease-standard),
    box-shadow var(--duration-fast) var(--ease-standard);
}

textarea.form-control {
  font-family: var(--font-family-base);
  font-size: var(--font-size-base);
}

select.form-control {
  padding: var(--space-8) var(--space-12);
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  background-image: var(--select-caret-light);
  background-repeat: no-repeat;
  background-position: right var(--space-12) center;
  background-size: 16px;
  padding-right: var(--space-32);
}

/* Add a dark mode specific caret */
@media (prefers-color-scheme: dark) {
  select.form-control {
    background-image: var(--select-caret-dark);
  }
}

/* Also handle data-color-scheme */
[data-color-scheme="dark"] select.form-control {
  background-image: var(--select-caret-dark);
}

[data-color-scheme="light"] select.form-control {
  background-image: var(--select-caret-light);
}

.form-control:focus {
  border-color: var(--color-primary);
  outline: var(--focus-outline);
}

.form-label {
  display: block;
  margin-bottom: var(--space-8);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
}

.form-group {
  margin-bottom: var(--space-16);
}

/* Card component */
.card {
  background-color: var(--color-surface);
  border-radius: var(--radius-lg);
  border: 1px solid var(--color-card-border);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
  transition: box-shadow var(--duration-normal) var(--ease-standard);
}

.card:hover {
  box-shadow: var(--shadow-md);
}

.card__body {
  padding: var(--space-16);
}

.card__header,
.card__footer {
  padding: var(--space-16);
  border-bottom: 1px solid var(--color-card-border-inner);
}

/* Status indicators - simplified with CSS variables */
.status {
  display: inline-flex;
  align-items: center;
  padding: var(--space-6) var(--space-12);
  border-radius: var(--radius-full);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
}

.status--success {
  background-color: rgba(
    var(--color-success-rgb, 33, 128, 141),
    var(--status-bg-opacity)
  );
  color: var(--color-success);
  border: 1px solid
    rgba(var(--color-success-rgb, 33, 128, 141), var(--status-border-opacity));
}

.status--error {
  background-color: rgba(
    var(--color-error-rgb, 192, 21, 47),
    var(--status-bg-opacity)
  );
  color: var(--color-error);
  border: 1px solid
    rgba(var(--color-error-rgb, 192, 21, 47), var(--status-border-opacity));
}

.status--warning {
  background-color: rgba(
    var(--color-warning-rgb, 168, 75, 47),
    var(--status-bg-opacity)
  );
  color: var(--color-warning);
  border: 1px solid
    rgba(var(--color-warning-rgb, 168, 75, 47), var(--status-border-opacity));
}

.status--info {
  background-color: rgba(
    var(--color-info-rgb, 98, 108, 113),
    var(--status-bg-opacity)
  );
  color: var(--color-info);
  border: 1px solid
    rgba(var(--color-info-rgb, 98, 108, 113), var(--status-border-opacity));
}

/* Container layout */
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--space-16);
  padding-left: var(--space-16);
}

@media (min-width: 640px) {
  .container {
    max-width: var(--container-sm);
  }
}
@media (min-width: 768px) {
  .container {
    max-width: var(--container-md);
  }
}
@media (min-width: 1024px) {
  .container {
    max-width: var(--container-lg);
  }
}
@media (min-width: 1280px) {
  .container {
    max-width: var(--container-xl);
  }
}

/* Utility classes */
.flex {
  display: flex;
}
.flex-col {
  flex-direction: column;
}
.items-center {
  align-items: center;
}
.justify-center {
  justify-content: center;
}
.justify-between {
  justify-content: space-between;
}
.gap-4 {
  gap: var(--space-4);
}
.gap-8 {
  gap: var(--space-8);
}
.gap-16 {
  gap: var(--space-16);
}

.m-0 {
  margin: 0;
}
.mt-8 {
  margin-top: var(--space-8);
}
.mb-8 {
  margin-bottom: var(--space-8);
}
.mx-8 {
  margin-left: var(--space-8);
  margin-right: var(--space-8);
}
.my-8 {
  margin-top: var(--space-8);
  margin-bottom: var(--space-8);
}

.p-0 {
  padding: 0;
}
.py-8 {
  padding-top: var(--space-8);
  padding-bottom: var(--space-8);
}
.px-8 {
  padding-left: var(--space-8);
  padding-right: var(--space-8);
}
.py-16 {
  padding-top: var(--space-16);
  padding-bottom: var(--space-16);
}
.px-16 {
  padding-left: var(--space-16);
  padding-right: var(--space-16);
}

.block {
  display: block;
}
.hidden {
  display: none;
}

/* Accessibility */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

:focus-visible {
  outline: var(--focus-outline);
  outline-offset: 2px;
}

/* Dark mode specifics */
[data-color-scheme="dark"] .btn--outline {
  border: 1px solid var(--color-border-secondary);
}

@font-face {
  font-family: 'FKGroteskNeue';
  src: url('https://r2cdn.perplexity.ai/fonts/FKGroteskNeue.woff2')
    format('woff2');
}

/* END PERPLEXITY DESIGN SYSTEM */
/* Discord-Style Video Call Interface */

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  padding: 0;
  font-family: var(--font-family-base);
  background-color: var(--color-background);
  color: var(--color-text);
  overflow: hidden;
  height: 100vh;
}

/* Header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-12) var(--space-16);
  background-color: var(--color-surface);
  border-bottom: 1px solid var(--color-border);
  height: 60px;
}

.header-left {
  display: flex;
  align-items: center;
  gap: var(--space-16);
}

.header-right {
  display: flex;
  align-items: center;
  gap: var(--space-8);
}

.recording-indicator {
  display: flex;
  align-items: center;
  gap: var(--space-6);
  color: var(--color-error);
  font-weight: var(--font-weight-medium);
  font-size: var(--font-size-sm);
}

.recording-dot {
  width: 8px;
  height: 8px;
  background-color: var(--color-error);
  border-radius: 50%;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.3; }
}

.session-title {
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-semibold);
  margin: 0;
}

.session-timer {
  font-family: var(--font-family-mono);
  font-size: var(--font-size-sm);
  color: var(--color-text-secondary);
  background-color: var(--color-secondary);
  padding: var(--space-4) var(--space-8);
  border-radius: var(--radius-base);
}

.btn-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border: none;
  background: transparent;
  border-radius: var(--radius-sm);
  cursor: pointer;
  color: var(--color-text-secondary);
  transition: all var(--duration-fast) var(--ease-standard);
}

.btn-icon:hover {
  background-color: var(--color-secondary);
  color: var(--color-text);
}

.btn-close:hover {
  background-color: var(--color-error);
  color: white;
}

/* Main Content */
.main-content {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 60px);
}

/* Discord-Style Video Container */
.video-container {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: var(--space-24);
  background: var(--color-bg-1);
}

.discord-video-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--space-20);
  width: 100%;
  height: 100%;
  max-width: 1200px;
  max-height: 600px;
}

.discord-video-frame {
  position: relative;
  background-color: var(--color-charcoal-800);
  border-radius: var(--radius-lg);
  overflow: hidden;
  box-shadow: var(--shadow-lg);
  transition: all var(--duration-normal) var(--ease-standard);
  border: 2px solid transparent;
}

.discord-video-frame.speaking {
  border-color: var(--color-success);
  box-shadow: 0 0 0 2px var(--color-success), var(--shadow-lg);
  animation: discordSpeakingGlow 2s ease-in-out infinite;
}

@keyframes discordSpeakingGlow {
  0%, 100% { 
    box-shadow: 0 0 0 2px var(--color-success), var(--shadow-lg);
  }
  50% { 
    box-shadow: 0 0 0 4px rgba(var(--color-success-rgb), 0.6), var(--shadow-lg);
  }
}

.video-content {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  background: linear-gradient(135deg, var(--color-bg-1), var(--color-bg-2));
}

.avatar-large {
  font-size: 5rem;
  opacity: 0.8;
}

.discord-video-overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: var(--space-16);
  background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.participant-info {
  display: flex;
  align-items: center;
  gap: var(--space-8);
}

.participant-name {
  color: white;
  font-weight: var(--font-weight-semibold);
  font-size: var(--font-size-lg);
}

.audio-status {
  display: flex;
  align-items: center;
  color: rgba(255, 255, 255, 0.8);
}

.ai-badge {
  background-color: var(--color-primary);
  color: var(--color-btn-primary-text);
  padding: var(--space-2) var(--space-6);
  border-radius: var(--radius-sm);
  font-size: var(--font-size-xs);
  font-weight: var(--font-weight-semibold);
  text-transform: uppercase;
}

.speaking-indicator {
  display: flex;
  align-items: center;
  gap: var(--space-8);
  position: relative;
}

.speaking-ring {
  width: 24px;
  height: 24px;
  border: 2px solid var(--color-success);
  border-radius: 50%;
  animation: speakingRing 1.5s ease-in-out infinite;
}

@keyframes speakingRing {
  0%, 100% { transform: scale(1); opacity: 1; }
  50% { transform: scale(1.2); opacity: 0.7; }
}

.wave-bars {
  display: flex;
  gap: var(--space-2);
  align-items: center;
}

.wave-bar {
  width: 3px;
  height: 16px;
  background-color: var(--color-success);
  border-radius: var(--radius-sm);
  animation: discordWave 1s ease-in-out infinite;
}

.wave-bar:nth-child(2) { animation-delay: 0.1s; }
.wave-bar:nth-child(3) { animation-delay: 0.2s; }

@keyframes discordWave {
  0%, 100% { transform: scaleY(0.3); }
  50% { transform: scaleY(1); }
}

/* Discord-Style Control Bar */
.control-bar {
  display: flex;
  justify-content: center;
  align-items: center;
  padding: var(--space-16) var(--space-24);
  background-color: var(--color-surface);
  border-top: 1px solid var(--color-border);
  height: 80px;
  gap: var(--space-24);
}

.control-group {
  display: flex;
  gap: var(--space-12);
}

.discord-control-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 48px;
  height: 48px;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
  background-color: var(--color-secondary);
  color: var(--color-text);
  position: relative;
  overflow: hidden;
}

.discord-control-btn::before {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--color-primary);
  border-radius: 50%;
  transform: scale(0);
  transition: transform var(--duration-fast) var(--ease-standard);
}

.discord-control-btn:hover::before {
  transform: scale(1);
}

.discord-control-btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.discord-control-btn > span {
  position: relative;
  z-index: 1;
}

.discord-control-btn:hover > span {
  color: var(--color-btn-primary-text);
}

.discord-control-btn.active {
  background-color: var(--color-primary);
  color: var(--color-btn-primary-text);
}

.discord-control-btn.muted {
  background-color: var(--color-error);
  color: white;
}

.end-call {
  background-color: var(--color-error);
  color: white;
}

.end-call:hover::before {
  background: #c53030;
}

/* Enhanced Chat Panel */
.enhanced-chat-panel {
  position: fixed;
  top: 60px;
  bottom: 80px;
  left: 0;
  width: 400px;
  background-color: var(--color-surface);
  border-right: 1px solid var(--color-border);
  box-shadow: var(--shadow-lg);
  z-index: 1000;
  display: flex;
  flex-direction: column;
  transform: translateX(-100%);
  transition: transform var(--duration-normal) var(--ease-standard);
}

.enhanced-chat-panel:not(.hidden) {
  transform: translateX(0);
}

.chat-panel-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--space-16);
  border-bottom: 1px solid var(--color-border);
}

.chat-tabs {
  display: flex;
  background-color: var(--color-secondary);
  border-radius: var(--radius-base);
  padding: var(--space-2);
}

.chat-tab {
  display: flex;
  align-items: center;
  gap: var(--space-6);
  padding: var(--space-8) var(--space-16);
  border: none;
  background: transparent;
  color: var(--color-text-secondary);
  cursor: pointer;
  border-radius: var(--radius-sm);
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  transition: all var(--duration-fast) var(--ease-standard);
}

.chat-tab.active {
  background-color: var(--color-primary);
  color: var(--color-btn-primary-text);
}

.tab-content {
  display: none;
  flex: 1;
  flex-direction: column;
}

.tab-content.active {
  display: flex;
}

/* Chat Messages */
.chat-messages, .transcript-messages {
  flex: 1;
  overflow-y: auto;
  padding: var(--space-16);
}

.chat-message {
  margin-bottom: var(--space-16);
  animation: slideInUp 0.3s ease-out;
}

@keyframes slideInUp {
  from { transform: translateY(10px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

.chat-message.system {
  text-align: center;
  color: var(--color-text-secondary);
  font-size: var(--font-size-sm);
  font-style: italic;
  background-color: var(--color-secondary);
  padding: var(--space-8);
  border-radius: var(--radius-base);
}

.chat-message.user {
  background-color: var(--color-bg-1);
  border-radius: var(--radius-lg) var(--radius-lg) var(--radius-sm) var(--radius-lg);
  padding: var(--space-12);
  margin-left: var(--space-24);
  border-left: 4px solid var(--color-primary);
}

.chat-message.agent {
  background-color: var(--color-bg-3);
  border-radius: var(--radius-lg) var(--radius-lg) var(--radius-lg) var(--radius-sm);
  padding: var(--space-12);
  margin-right: var(--space-24);
  border-left: 4px solid var(--color-success);
}

.chat-message.note {
  background-color: var(--color-bg-2);
  border-radius: var(--radius-lg);
  padding: var(--space-12);
  border-left: 4px solid var(--color-warning);
  margin-left: var(--space-12);
  margin-right: var(--space-12);
}

.note-header {
  display: flex;
  align-items: center;
  gap: var(--space-6);
  margin-bottom: var(--space-6);
  font-size: var(--font-size-sm);
  color: var(--color-warning);
  font-weight: var(--font-weight-semibold);
}

.note-timestamp {
  font-family: var(--font-family-mono);
  font-size: var(--font-size-xs);
  background-color: var(--color-warning);
  color: var(--color-background);
  padding: var(--space-2) var(--space-6);
  border-radius: var(--radius-sm);
}

.chat-sender {
  font-weight: var(--font-weight-semibold);
  font-size: var(--font-size-sm);
  margin-bottom: var(--space-4);
  color: var(--color-primary);
}

.agent .chat-sender {
  color: var(--color-success);
}

.note-sender {
  color: var(--color-warning);
}

.chat-text {
  display: block;
  line-height: var(--line-height-normal);
}

/* Chat Input */
.chat-input-container {
  display: flex;
  align-items: center;
  gap: var(--space-8);
  padding: var(--space-16);
  border-top: 1px solid var(--color-border);
  background-color: var(--color-background);
}

.chat-input {
  flex: 1;
  padding: var(--space-12) var(--space-16);
  border: 2px solid var(--color-border);
  border-radius: var(--radius-lg);
  background-color: var(--color-surface);
  color: var(--color-text);
  font-size: var(--font-size-base);
  transition: border-color var(--duration-fast) var(--ease-standard);
}

.chat-input:focus {
  outline: none;
  border-color: var(--color-primary);
}

.upload-btn, .send-btn {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all var(--duration-fast) var(--ease-standard);
}

.upload-btn {
  background-color: var(--color-secondary);
  color: var(--color-text);
}

.upload-btn:hover {
  background-color: var(--color-secondary-hover);
  transform: scale(1.1);
}

.send-btn {
  background-color: var(--color-primary);
  color: var(--color-btn-primary-text);
}

.send-btn:hover {
  background-color: var(--color-primary-hover);
  transform: scale(1.1);
}

/* Transcript Messages */
.transcript-message {
  display: flex;
  gap: var(--space-8);
  margin-bottom: var(--space-12);
  padding: var(--space-8);
  border-radius: var(--radius-base);
  transition: background-color var(--duration-fast) var(--ease-standard);
  cursor: pointer;
}

.transcript-message:hover {
  background-color: var(--color-secondary);
}

.timestamp {
  font-family: var(--font-family-mono);
  font-size: var(--font-size-xs);
  color: var(--color-text-secondary);
  min-width: 60px;
  background-color: var(--color-secondary);
  padding: var(--space-2) var(--space-4);
  border-radius: var(--radius-sm);
}

.speaker-name {
  font-weight: var(--font-weight-semibold);
  min-width: 100px;
}

.speaker-name.user {
  color: var(--color-primary);
}

.speaker-name.agent {
  color: var(--color-success);
}

.message-text {
  flex: 1;
  line-height: var(--line-height-normal);
}

/* Discord Apps Modal */
.discord-apps-modal {
  position: fixed;
  bottom: 80px;
  left: 50%;
  transform: translateX(-50%) translateY(100%);
  background-color: var(--color-surface);
  border-radius: var(--radius-lg) var(--radius-lg) 0 0;
  border: 1px solid var(--color-border);
  box-shadow: var(--shadow-lg);
  z-index: 2000;
  transition: transform var(--duration-normal) var(--ease-standard);
  width: 480px;
  max-height: 400px;
}

.discord-apps-modal:not(.hidden) {
  transform: translateX(-50%) translateY(0);
}

.apps-modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-16);
  border-bottom: 1px solid var(--color-border);
}

.apps-modal-header h3 {
  margin: 0;
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-semibold);
}

.discord-apps-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: var(--space-12);
  padding: var(--space-16);
}

.discord-app-block {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: var(--space-16) var(--space-12);
  background-color: var(--color-background);
  border: 2px solid var(--color-border);
  border-radius: var(--radius-base);
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
  text-align: center;
}

.discord-app-block:hover {
  border-color: var(--color-primary);
  background-color: var(--color-secondary);
  transform: translateY(-2px);
  box-shadow: var(--shadow-sm);
}

.discord-app-block .app-icon {
  font-size: 2rem;
  margin-bottom: var(--space-8);
}

.discord-app-block .app-name {
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  color: var(--color-text);
  line-height: var(--line-height-tight);
}

/* Modal */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 3000;
  opacity: 0;
  transition: opacity var(--duration-normal) var(--ease-standard);
}

.modal:not(.hidden) {
  opacity: 1;
}

.modal-content {
  background-color: var(--color-surface);
  border-radius: var(--radius-lg);
  width: 90%;
  max-width: 500px;
  max-height: 80vh;
  overflow: hidden;
  box-shadow: var(--shadow-lg);
  transform: scale(0.95);
  transition: transform var(--duration-normal) var(--ease-standard);
}

.modal:not(.hidden) .modal-content {
  transform: scale(1);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: var(--space-16);
  border-bottom: 1px solid var(--color-border);
}

.modal-header h3 {
  margin: 0;
  font-size: var(--font-size-lg);
  font-weight: var(--font-weight-semibold);
}

.modal-body {
  padding: var(--space-16);
}

.share-options {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: var(--space-16);
}

.share-option {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: var(--space-16);
  border: 2px solid var(--color-border);
  border-radius: var(--radius-base);
  cursor: pointer;
  transition: all var(--duration-fast) var(--ease-standard);
}

.share-option:hover {
  border-color: var(--color-primary);
  background-color: var(--color-secondary);
}

.share-icon {
  font-size: 2rem;
  margin-bottom: var(--space-8);
  color: var(--color-primary);
}

.share-label {
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-medium);
  text-align: center;
}

/* Connection Indicator */
.connection-indicator {
  position: fixed;
  top: 70px;
  right: var(--space-16);
  display: flex;
  align-items: center;
  padding: var(--space-6) var(--space-10);
  background-color: var(--color-surface);
  border: 1px solid var(--color-border);
  border-radius: var(--radius-base);
  font-size: var(--font-size-xs);
  z-index: 500;
  transition: all var(--duration-fast) var(--ease-standard);
}

.connection-indicator.excellent {
  color: var(--color-success);
  border-color: var(--color-success);
}

.connection-indicator.poor {
  color: var(--color-warning);
  border-color: var(--color-warning);
}

.connection-indicator.disconnected {
  color: var(--color-error);
  border-color: var(--color-error);
}

/* Utility Classes */
.hidden {
  display: none !important;
}

.file-input {
  display: none;
}

/* Responsive Design */
@media (max-width: 768px) {
  .discord-video-grid {
    grid-template-columns: 1fr;
    gap: var(--space-16);
  }
  
  .enhanced-chat-panel {
    width: 100%;
  }
  
  .discord-apps-modal {
    width: 90%;
  }
  
  .discord-apps-grid {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .control-group {
    gap: var(--space-8);
  }
  
  .discord-control-btn {
    width: 40px;
    height: 40px;
  }
}

/* Scrollbar Styling */
.chat-messages::-webkit-scrollbar,
.transcript-messages::-webkit-scrollbar {
  width: 6px;
}

.chat-messages::-webkit-scrollbar-track,
.transcript-messages::-webkit-scrollbar-track {
  background: var(--color-secondary);
  border-radius: var(--radius-sm);
}

.chat-messages::-webkit-scrollbar-thumb,
.transcript-messages::-webkit-scrollbar-thumb {
  background: var(--color-border);
  border-radius: var(--radius-sm);
}

.chat-messages::-webkit-scrollbar-thumb:hover,
.transcript-messages::-webkit-scrollbar-thumb:hover {
  background: var(--color-primary);
}
</file>

<file path="proto/meet-manage.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak Meetings</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons / Feather icons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
</head>
<body class="bg-background font-sans">
    <div class="flex flex-col h-screen">
        <!-- Navbar (same as previous) -->
        <header class="bg-white border-b border-gray-200">
            <div class="flex items-center justify-between px-4 py-3">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="md:hidden text-gray-500 focus:outline-none">
                        <!-- Heroicon name: outline/menu -->
                        <i data-feather="menu"></i>
                    </button>
                    <div class="flex items-center">
                        <span class="text-xl font-bold text-primary">Shikshak</span>
                        <span class="ml-2 px-2 py-1 text-xs bg-yellow-100 text-yellow-800 rounded">Pro ✨</span>
                    </div>
                </div>

                <div class="flex-1 max-w-md mx-4">
                    <div class="relative">
                        <input type="text" placeholder="Search..." class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 ease-out">
                        <i data-feather="search" class="w-5 h-5 absolute left-3 top-2.5 text-gray-400"></i>
                    </div>
                </div>

                <div class="flex items-center space-x-4">
                    <div class="relative">
                        <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                            <i data-feather="bell"></i>
                        </button>
                        <span class="absolute top-0 right-0 inline-flex items-center justify-center px-2 py-1 text-xs font-bold leading-none text-white transform translate-x-1/2 -translate-y-1/2 bg-red-500 rounded-full animate-pulse">3</span>
                    </div>
                    <div class="relative">
                        <button class="flex items-center space-x-1 text-gray-700 hover:text-gray-900 focus:outline-none">
                            <span>John Doe</span>
                            <i data-feather="chevron-down"></i>
                        </button>
                    </div>
                    <button class="text-gray-500 hover:text-gray-700 focus:outline-none">
                        <i data-feather="settings"></i>
                    </button>
                </div>
            </div>
        </header>

        <div class="flex flex-1 overflow-hidden">
            <!-- Sidebar (same as previous) -->
            <aside id="sidebar" class="site-sidebar">
                <nav class="flex-1 py-4">
                    <a href="dashboard.html" class="sidebar-item">
                        <i data-feather="home" class="w-5 h-5 mr-3"></i>
                        Dashboard
                    </a>
                    <a href="meet-manage.html" class="sidebar-item active">
                        <i data-feather="phone" class="w-5 h-5 mr-3"></i>
                        Meetings
                    </a>
                    <a href="agent-manage.html" class="sidebar-item">
                        <i data-feather="cpu" class="w-5 h-5 mr-3"></i>
                        Agents
                    </a>
                    <a href="chat.html" class="sidebar-item">
                        <i data-feather="message-circle" class="w-5 h-5 mr-3"></i>
                        Chat
                    </a>
                    <a href="post-summary.html" class="sidebar-item">
                        <i data-feather="file-text" class="w-5 h-5 mr-3"></i>
                        Reports
                    </a>
                    <div class="px-4 py-6">
                        <a href="upgrade.html" class="flex items-center px-4 py-3 text-gray-700 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-100 card-hover">
                            <i data-feather="star" class="w-5 h-5 mr-3 text-yellow-500"></i>
                            <span class="font-medium">Upgrade Plan</span>
                        </a>
                    </div>
                </nav>
            </aside>

            <!-- Overlay for mobile sidebar -->
            <div id="sidebar-overlay" class="fixed inset-0 bg-black bg-opacity-50 z-0 md:hidden hidden"></div>

            <!-- Main Content Area -->
            <main class="flex-1 overflow-y-auto p-4 md:p-6">
                <div class="max-w-6xl mx-auto">
                    <!-- Page Header -->
                    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
                        <h1 class="text-2xl font-bold text-gray-800 mb-4 md:mb-0">Meetings</h1>
                        <div class="flex space-x-2">
                            <a href="call-lobby.html" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary flex items-center inline-flex">
                                <i data-feather="plus" class="w-4 h-4 mr-2"></i> New Meeting
                            </a>
                            <button class="p-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                                <i data-feather="refresh-cw" class="w-5 h-5"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Filters Bar -->
                    <div class="bg-white rounded-lg shadow-sm p-4 mb-6">
                        <div class="flex flex-col md:flex-row md:items-center space-y-3 md:space-y-0 md:space-x-4">
                            <div class="relative flex-1">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <i data-feather="search" class="h-5 w-5 text-gray-400"></i>
                                </div>
                                <input type="text" placeholder="Search meetings..." class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-primary focus:border-primary sm:text-sm">
                            </div>
                            <div class="flex flex-wrap gap-2">
                                <button class="px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary flex items-center">
                                    Status <i data-feather="chevron-down" class="ml-1 w-4 h-4"></i>
                                </button>
                                <button class="px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary flex items-center">
                                    Agent <i data-feather="chevron-down" class="ml-1 w-4 h-4"></i>
                                </button>
                                <button class="px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary flex items-center">
                                    Date Range <i data-feather="chevron-down" class="ml-1 w-4 h-4"></i>
                                </button>
                                <button class="px-3 py-1.5 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-1 focus:ring-primary focus:border-primary">
                                    Reset
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Data Table -->
                    <div class="bg-white shadow-sm rounded-lg overflow-hidden">
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sort-header">
                                            Meeting <i data-feather="chevron-up" class="sort-indicator w-4 h-4"></i>
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sort-header">
                                            Agent <i data-feather="chevron-up" class="sort-indicator asc w-4 h-4"></i>
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sort-header">
                                            Status <i data-feather="chevron-up" class="sort-indicator w-4 h-4"></i>
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sort-header">
                                            Date <i data-feather="chevron-up" class="sort-indicator w-4 h-4"></i>
                                        </th>
                                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Actions
                                        </th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    <!-- Row 1 -->
                                    <tr class="table-row-hover group">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center mr-3">
                                                    <i data-feather="phone" class="h-5 w-5 text-blue-500"></i>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">Daily Standup</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">🤖 Hustle Coach</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge status-completed">Completed</span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            Aug 28, 2025<br>2:30 PM
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="action-cell justify-end">
                                                <button class="action-button">
                                                    <i data-feather="eye" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="edit" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="trash" class="w-4 h-4"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- Row 2 -->
                                    <tr class="table-row-hover group">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10 rounded-full bg-purple-100 flex items-center justify-center mr-3">
                                                    <i data-feather="target" class="h-5 w-5 text-purple-500"></i>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">Strategy Review</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">🧠 Business Advisor</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge status-processing">Processing</span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            Aug 27, 2025<br>4:15 PM
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="action-cell justify-end">
                                                <button class="action-button">
                                                    <i data-feather="eye" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="edit" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="trash" class="w-4 h-4"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- Row 3 -->
                                    <tr class="table-row-hover group">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10 rounded-full bg-yellow-100 flex items-center justify-center mr-3">
                                                    <i data-feather="lightbulb" class="h-5 w-5 text-yellow-500"></i>
                                                </div>
                                                <div>
                                                    <div class="text-sm font-medium text-gray-900">Brainstorm Session</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm text-gray-900">✨ Creative Catalyst</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="status-badge status-upcoming">Upcoming</span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            Aug 29, 2025<br>10:00 AM
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="action-cell justify-end">
                                                <button class="action-button">
                                                    <i data-feather="play" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="edit" class="w-4 h-4"></i>
                                                </button>
                                                <button class="action-button">
                                                    <i data-feather="trash" class="w-4 h-4"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                    <!-- Add more rows as needed -->
                                </tbody>
                            </table>
                        </div>

                        <!-- Pagination -->
                        <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                            <div class="flex-1 flex justify-between sm:hidden">
                                <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Previous
                                </a>
                                <a href="#" class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50">
                                    Next
                                </a>
                            </div>
                            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                                <div>
                                    <p class="text-sm text-gray-700">
                                        Showing <span class="font-medium">1</span> to <span class="font-medium">3</span> of
                                        <span class="font-medium">3</span> results
                                    </p>
                                </div>
                                <div>
                                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                        <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Previous</span>
                                            <i data-feather="chevron-left" class="w-5 h-5"></i>
                                        </a>
                                        <a href="#" aria-current="page" class="z-10 bg-primary border-primary text-white relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                            1
                                        </a>
                                        <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            2
                                        </a>
                                        <a href="#" class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            3
                                        </a>
                                        <a href="#" class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                                            <span class="sr-only">Next</span>
                                            <i data-feather="chevron-right" class="w-5 h-5"></i>
                                        </a>
                                    </nav>
                                </div>
                                <div>
                                    <select class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                                        <option>10 per page</option>
                                        <option>20 per page</option>
                                        <option>50 per page</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        // Simple JavaScript for sidebar toggle on mobile (same as previous)
        document.addEventListener('DOMContentLoaded', function () {
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebar = document.getElementById('sidebar');
            const overlay = document.getElementById('sidebar-overlay');

            if (sidebarToggle && sidebar && overlay) {
                sidebarToggle.addEventListener('click', function () {
                    sidebar.classList.toggle('-translate-x-full');
                    overlay.classList.toggle('hidden');
                });

                overlay.addEventListener('click', function () {
                    sidebar.classList.add('-translate-x-full');
                    overlay.classList.add('hidden');
                });
            }

            // Simulate sort indicator rotation on header click
            const sortHeaders = document.querySelectorAll('.sort-header');
            sortHeaders.forEach(header => {
                header.addEventListener('click', function() {
                    const indicator = this.querySelector('.sort-indicator');
                    if (indicator) {
                        indicator.classList.toggle('asc');
                    }
                });
            });
        });
    </script>
</body>
</html>
</file>

<file path="proto/modal-template.html">
<!-- Modal Template -->
<!-- Usage: Include this HTML and customize the ID and content -->
<!-- Trigger with: data-modal-toggle="modal-id" -->
<!-- Close with: data-modal-close -->

<div id="YOUR_MODAL_ID" class="modal-backdrop hidden">
    <div class="modal-container">
        <div class="px-6 py-4 border-b border-gray-200 flex justify-between items-center">
            <h3 class="text-lg font-semibold text-gray-900">Modal Title</h3>
            <button data-modal-close class="text-gray-400 hover:text-gray-500 focus:outline-none">
                <i data-feather="x"></i>
            </button>
        </div>
        
        <div class="px-6 py-4">
            <!-- Modal content goes here -->
            <p>Modal content</p>
        </div>
        
        <div class="px-6 py-4 border-t border-gray-200 flex justify-end space-x-3">
            <button data-modal-close class="px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400">
                Cancel
            </button>
            <button class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                Confirm
            </button>
        </div>
    </div>
</div>

<style>
/* Modal Styles */
.modal-backdrop {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 50;
}

.modal-container {
    background-color: white;
    border-radius: 0.5rem;
    width: 100%;
    max-width: 28rem;
    max-height: calc(100vh - 2rem);
    overflow-y: auto;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
}

/* Form input styles */
.form-input, .form-textarea, .form-select {
    width: 100%;
    padding: 0.5rem 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    background-color: #f9fafb;
    color: #1f2937;
    font-size: 0.875rem;
    line-height: 1.25rem;
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-input:focus, .form-textarea:focus, .form-select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
    background-color: white;
}

.form-textarea {
    min-height: 6rem;
    resize: vertical;
}

/* Character counter */
.char-counter {
    text-align: right;
    font-size: 0.75rem;
    color: #6b7280;
    margin-top: 0.25rem;
}

/* Radio and Checkbox styles */
.radio-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

.radio-label {
    display: flex;
    align-items: center;
    padding: 0.5rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
}

.radio-label:hover {
    background-color: #f9fafb;
}

.radio-input:checked + .radio-custom {
    border-color: var(--primary);
    background-color: rgba(67, 97, 238, 0.05);
}

.radio-custom {
    position: relative;
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    padding-left: 1.5rem;
}

.radio-custom::before {
    content: '';
    position: absolute;
    left: 0;
    width: 1rem;
    height: 1rem;
    border: 2px solid #d1d5db;
    border-radius: 50%;
}

.radio-input:checked + .radio-custom::before {
    border-color: var(--primary);
    background-color: var(--primary);
    box-shadow: inset 0 0 0 3px white;
}
</style>
</file>

<file path="proto/post-summary.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Post-Call Experience</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <script>
        /* Tailwind config must run before the CDN loads so the runtime picks up the custom theme */
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: 'var(--primary)',
                        secondary: 'var(--secondary)',
                        accent: '#4cc9f0',
                        background: 'var(--background)',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style type="text/tailwindcss">
        @layer components {
            /* Main Layout */
            .post-call-container {
                @apply flex flex-col h-screen bg-gray-50;
            }

            /* Header */
            .post-call-header {
                @apply bg-white py-4 px-6 border-b border-gray-200;
            }
            .session-title {
                @apply text-xl font-bold text-gray-900;
            }
            .session-meta {
                @apply flex flex-wrap items-center text-sm text-gray-600 mt-1;
            }
            .meta-item {
                @apply flex items-center mr-4;
            }
            .meta-item-icon {
                @apply mr-1.5 text-green-500;
            }

            /* Tab Navigation */
            .tab-navigation {
                @apply bg-white border-b border-gray-200;
            }
            .tab-list {
                @apply flex px-6;
            }
            .tab-button {
                @apply py-4 px-4 text-sm font-medium border-b-2 border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-primary whitespace-nowrap;
            }
            .tab-button.active {
                @apply text-primary border-primary;
            }

            /* Tab Content Area */
            .tab-content-area {
                @apply flex-1 overflow-hidden p-6;
            }
            .tab-panel {
                @apply hidden;
            }
            .tab-panel.active {
                @apply block animate-fadeIn;
            }
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            .animate-fadeIn {
                animation: fadeIn 0.3s ease-out forwards;
            }

            /* Summary Card */
            .summary-card {
                @apply bg-white rounded-lg shadow-sm p-6 mb-6;
            }
            .card-title {
                @apply text-lg font-semibold text-gray-900 mb-4 flex items-center;
            }

            /* Key Insights & Topics */
            .insight-list, .topic-list {
                @apply space-y-2;
            }
            .insight-item, .topic-item {
                @apply flex items-start;
            }
            .insight-bullet, .topic-bullet {
                @apply flex-shrink-0 mt-1 mr-3 text-gray-400;
            }
            .insight-text, .topic-text {
                @apply text-gray-700;
            }
            .topic-link {
                @apply text-primary hover:underline cursor-pointer;
            }

            /* Action Items */
            .action-item {
                @apply flex items-center mb-2;
            }
            .action-checkbox {
                @apply h-4 w-4 text-primary rounded border-gray-300 focus:ring-primary mr-3;
            }
            .action-text {
                @apply text-gray-700;
            }
            .action-text.completed {
                @apply line-through text-gray-500;
            }

            /* Agent Performance */
            .rating-container {
                @apply flex;
            }
            .rating-star {
                @apply text-gray-300 cursor-pointer;
            }
            .rating-star.filled {
                @apply text-yellow-400;
            }

            /* Transcript Panel */
            .transcript-container {
                @apply bg-white rounded-lg shadow-sm p-6;
            }
            .transcript-entry {
                @apply mb-4 pb-4 border-b border-gray-100 last:border-0 last:pb-0 last:mb-0;
            }
            .transcript-timestamp {
                @apply text-xs font-medium text-gray-500 mb-1 cursor-pointer hover:underline;
            }
            .transcript-speaker {
                @apply font-semibold text-gray-900 mr-2;
            }
            .transcript-text {
                @apply text-gray-700;
            }

            /* Recording Panel Placeholder */
            .recording-placeholder {
                @apply bg-white rounded-lg shadow-sm p-12 text-center;
            }

            /* AI Chat Panel Placeholder */
            .ai-chat-placeholder {
                @apply bg-white rounded-lg shadow-sm p-12 text-center;
            }
        }
    </style>
</head>
<body class="bg-background font-sans">
    <div class="post-call-container">
        <!-- Header -->
        <header class="post-call-header">
            <h1 class="session-title">Startup Coaching Session</h1>
            <div class="session-meta">
                <span class="meta-item">
                    <i data-feather="check-circle" class="meta-item-icon w-4 h-4"></i>
                    Completed
                </span>
                <span class="meta-item">
                    <i data-feather="clock" class="meta-item-icon w-4 h-4"></i>
                    Duration: 25:32
                </span>
                <span class="meta-item">
                    <i data-feather="database" class="meta-item-icon w-4 h-4"></i>
                    Processed: 2 min ago
                </span>
                <button class="ml-auto flex items-center text-sm font-medium text-primary hover:text-secondary focus:outline-none">
                    <i data-feather="share-2" class="w-4 h-4 mr-1"></i> Share
                </button>
            </div>
        </header>

        <!-- Tab Navigation -->
        <nav class="tab-navigation">
            <div class="tab-list" role="tablist">
                <button id="tab-summary" class="tab-button active" role="tab" aria-selected="true">📝 Summary</button>
                <button id="tab-transcript" class="tab-button" role="tab" aria-selected="false">📜 Transcript</button>
                <button id="tab-recording" class="tab-button" role="tab" aria-selected="false">🎥 Recording</button>
                <button id="tab-ai-chat" class="tab-button" role="tab" aria-selected="false">💬 AI Chat</button>
            </div>
        </nav>

        <!-- Tab Content Area -->
        <main class="tab-content-area">
            <!-- Summary Tab Panel -->
            <section id="panel-summary" class="tab-panel active" role="tabpanel" aria-labelledby="tab-summary">
                <div class="summary-card">
                    <h2 class="card-title"><i data-feather="bar-chart-2" class="w-5 h-5 mr-2 text-primary"></i> Key Insights</h2>
                    <ul class="insight-list">
                        <li class="insight-item">
                            <i data-feather="chevron-right" class="insight-bullet w-4 h-4"></i>
                            <span class="insight-text">Market validation strategies for early-stage startups</span>
                        </li>
                        <li class="insight-item">
                            <i data-feather="chevron-right" class="insight-bullet w-4 h-4"></i>
                            <span class="insight-text">Importance of unique value proposition in crowded markets</span>
                        </li>
                        <li class="insight-item">
                            <i data-feather="chevron-right" class="insight-bullet w-4 h-4"></i>
                            <span class="insight-text">Scalability considerations for sustainable growth</span>
                        </li>
                    </ul>
                </div>

                <div class="summary-card">
                    <h2 class="card-title"><i data-feather="zap" class="w-5 h-5 mr-2 text-primary"></i> Action Items</h2>
                    <div class="action-item">
                        <input type="checkbox" class="action-checkbox" id="action-1">
                        <label for="action-1" class="action-text">Research competitor analysis frameworks</label>
                    </div>
                    <div class="action-item">
                        <input type="checkbox" class="action-checkbox" id="action-2">
                        <label for="action-2" class="action-text">Develop MVP testing strategy</label>
                    </div>
                    <div class="action-item">
                        <input type="checkbox" class="action-checkbox" id="action-3">
                        <label for="action-3" class="action-text">Create investor pitch timeline</label>
                    </div>
                </div>

                <div class="summary-card">
                    <h2 class="card-title"><i data-feather="tag" class="w-5 h-5 mr-2 text-primary"></i> Main Topics Discussed (with timestamps)</h2>
                    <ul class="topic-list">
                        <li class="topic-item">
                            <i data-feather="clock" class="topic-bullet w-4 h-4"></i>
                            <span class="topic-link topic-timestamp-link" data-target="ts-02-15">[02:15]</span>
                            <span class="topic-text ml-2">Market Validation Strategies</span>
                        </li>
                        <li class="topic-item">
                            <i data-feather="clock" class="topic-bullet w-4 h-4"></i>
                            <span class="topic-link topic-timestamp-link" data-target="ts-08-30">[08:30]</span>
                            <span class="topic-text ml-2">Building a Strong Value Proposition</span>
                        </li>
                        <li class="topic-item">
                            <i data-feather="clock" class="topic-bullet w-4 h-4"></i>
                            <span class="topic-link topic-timestamp-link" data-target="ts-15-45">[15:45]</span>
                            <span class="topic-text ml-2">Fundraising Timeline & Milestones</span>
                        </li>
                        <li class="topic-item">
                            <i data-feather="clock" class="topic-bullet w-4 h-4"></i>
                            <span class="topic-link topic-timestamp-link" data-target="ts-20-10">[20:10]</span>
                            <span class="topic-text ml-2">Scaling Challenges & Solutions</span>
                        </li>
                    </ul>
                </div>

                <div class="summary-card">
                    <h2 class="card-title"><i data-feather="cpu" class="w-5 h-5 mr-2 text-primary"></i> Agent Performance</h2>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <p class="text-sm text-gray-600 mb-1">Response Quality</p>
                            <div class="rating-container">
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                            </div>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600 mb-1">Relevance</p>
                            <div class="rating-container">
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star w-5 h-5"></i>
                            </div>
                        </div>
                        <div>
                            <p class="text-sm text-gray-600 mb-1">Engagement</p>
                            <div class="rating-container">
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                                <i data-feather="star" class="rating-star filled w-5 h-5"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </section>

            <!-- Transcript Tab Panel -->
            <section id="panel-transcript" class="tab-panel" role="tabpanel" aria-labelledby="tab-transcript">
                <div class="transcript-container">
                    <div class="transcript-entry" id="ts-00-00">
                        <div class="transcript-timestamp">[00:00]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">Welcome everyone to today's session on startup strategy. I'm here to help you navigate the challenges of building and scaling a successful venture.</span></div>
                    </div>
                    <div class="transcript-entry" id="ts-02-15">
                        <div class="transcript-timestamp topic-timestamp">[02:15]</div>
                        <div><span class="transcript-speaker">👤 John Doe:</span> <span class="transcript-text">What are the key things to focus on when validating a market idea?</span></div>
                    </div>
                    <div class="transcript-entry">
                        <div class="transcript-timestamp">[02:30]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">Great question, John. Market validation is crucial. Focus on talking to potential customers, understanding their pain points, and proving that they are willing to pay for your solution before building the full product.</span></div>
                    </div>
                    <div class="transcript-entry" id="ts-08-30">
                        <div class="transcript-timestamp topic-timestamp">[08:30]</div>
                        <div><span class="transcript-speaker">👤 Jane Smith:</span> <span class="transcript-text">How do we make sure our value proposition stands out?</span></div>
                    </div>
                    <div class="transcript-entry">
                        <div class="transcript-timestamp">[08:45]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">It's about clarity and uniqueness. Clearly articulate the specific problem you solve and how you solve it better or differently than existing alternatives. This is your North Star.</span></div>
                    </div>
                    <div class="transcript-entry" id="ts-15-45">
                        <div class="transcript-timestamp topic-timestamp">[15:45]</div>
                        <div><span class="transcript-speaker">👤 John Doe:</span> <span class="transcript-text">When should we start thinking about fundraising?</span></div>
                    </div>
                    <div class="transcript-entry">
                        <div class="transcript-timestamp">[16:00]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">Ideally, after you have some traction - maybe a prototype, early users, or revenue. You need to show investors that there's real demand and that you can execute.</span></div>
                    </div>
                    <div class="transcript-entry" id="ts-20-10">
                        <div class="transcript-timestamp topic-timestamp">[20:10]</div>
                        <div><span class="transcript-speaker">👤 Jane Smith:</span> <span class="transcript-text">What are the biggest scaling challenges we should anticipate?</span></div>
                    </div>
                    <div class="transcript-entry">
                        <div class="transcript-timestamp">[20:25]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">Common ones include maintaining quality as you grow, managing team dynamics, and ensuring your systems and processes can handle increased load. Planning for these early helps mitigate risks.</span></div>
                    </div>
                    <div class="transcript-entry">
                        <div class="transcript-timestamp">[25:20]</div>
                        <div><span class="transcript-speaker">🤖 Hustle Coach:</span> <span class="transcript-text">That's all the time we have for today. Remember to focus on your customers, stay adaptable, and keep iterating. Good luck with your ventures!</span></div>
                    </div>
                </div>
            </section>

            <!-- Recording Tab Panel -->
            <section id="panel-recording" class="tab-panel" role="tabpanel" aria-labelledby="tab-recording">
                <div class="recording-placeholder">
                    <i data-feather="video" class="w-16 h-16 text-gray-400 mx-auto mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-1">Session Recording</h3>
                    <p class="text-gray-500">The recording for this session is available.</p>
                    <button class="mt-4 px-4 py-2 bg-primary text-white rounded-md hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        Download Recording
                    </button>
                </div>
            </section>

            <!-- AI Chat Tab Panel -->
            <section id="panel-ai-chat" class="tab-panel" role="tabpanel" aria-labelledby="tab-ai-chat">
                <div class="ai-chat-placeholder">
                    <i data-feather="message-circle" class="w-16 h-16 text-gray-400 mx-auto mb-4"></i>
                    <h3 class="text-lg font-medium text-gray-900 mb-1">AI Chat History</h3>
                    <p class="text-gray-500">Review your private conversation history with the AI co-host.</p>
                    <button class="mt-4 px-4 py-2 bg-primary text-white rounded-md hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
                        View Chat
                    </button>
                </div>
            </section>
        </main>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            // --- Tab Switching Logic ---
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabPanels = document.querySelectorAll('.tab-panel');

            tabButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const targetPanelId = `panel-${button.id.split('-')[1]}`;

                    // Update active tab button
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');

                    // Update active tab panel with animation
                    tabPanels.forEach(panel => {
                        if (panel.id === targetPanelId) {
                            panel.classList.add('active');
                        } else {
                            panel.classList.remove('active');
                        }
                    });
                });
            });

            // --- Action Item Checkboxes ---
            const checkboxes = document.querySelectorAll('.action-checkbox');
            checkboxes.forEach(checkbox => {
                const labelText = checkbox.nextElementSibling;
                checkbox.addEventListener('change', function() {
                    if (this.checked) {
                        labelText.classList.add('completed');
                    } else {
                        labelText.classList.remove('completed');
                    }
                });
            });

            // --- Timestamp Link Navigation (in Summary) ---
            const timestampLinks = document.querySelectorAll('.topic-timestamp-link');
            timestampLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const targetId = this.getAttribute('data-target');
                    const targetElement = document.getElementById(targetId);

                    if (targetElement) {
                        // Switch to Transcript tab first
                        document.getElementById('tab-transcript').click();
                        // Use a slight delay to ensure the tab content is rendered before scrolling
                        setTimeout(() => {
                            targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            // Optional: Add a temporary highlight effect
                            targetElement.style.backgroundColor = '#fef3c7'; // Light yellow
                            setTimeout(() => {
                                targetElement.style.backgroundColor = '';
                            }, 2000);
                        }, 300); // Adjust delay if needed
                    }
                });
            });

            // --- Star Ratings (Basic Hover Effect) ---
            // This is a simplified version. A full implementation would require more complex logic.
            const ratingStars = document.querySelectorAll('.rating-star');
            ratingStars.forEach((star, index) => {
                const parentContainer = star.parentElement;
                star.addEventListener('mouseenter', () => {
                    // Fill all stars up to and including this one
                    for (let i = 0; i <= index; i++) {
                        parentContainer.children[i].classList.add('filled');
                    }
                });
                star.addEventListener('mouseleave', () => {
                    // Reset to original state based on 'filled' class
                    for (let i = 0; i < parentContainer.children.length; i++) {
                        if (!parentContainer.children[i].classList.contains('filled')) {
                            parentContainer.children[i].classList.remove('filled');
                        }
                    }
                });
                // Clicking would set the rating - omitted for simplicity in prototype
            });

        });
    </script>
</body>
</html>
</file>

<file path="proto/styles.css">
/* Enhanced Shared site styles - Integrated Design System */
:root{
  /* Core Brand Colors - Bridge with style.css design system */
  --primary: #4361ee;
  --secondary: #3f37c9;
  --background: #f8f9fa;
  
  /* Enhanced Design System Integration */
  --color-primary: var(--primary);
  --color-secondary: var(--secondary);
  --color-background: var(--background);
  --color-surface: #ffffff;
  --color-text: #1f2937;
  --color-text-secondary: #6b7280;
  --color-border: #e5e7eb;
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;
  
  /* Enhanced spacing and sizing */
  --radius-base: 8px;
  --radius-lg: 12px;
  --shadow-sm: 0 1px 3px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 4px 6px rgba(0, 0, 0, 0.1);
  
  /* Header height for layout calculations */
  --header-height: 65px;
}

html,body{
  background-color:var(--background);
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  margin: 0;
  padding: 0;
} 

/* =========== Layout / Sidebar =========== */
/* Enhanced sidebar with better mobile support */
.site-sidebar, #sidebar {
  background: #ffffff;
  width: 16rem; /* w-64 */
  border-right: 1px solid var(--color-border);
  flex-shrink: 0;
  transition: transform 300ms ease-out;
  position: fixed; /* mobile default */
  transform: translateX(-100%); /* hidden by default on small screens */
  height: calc(100vh - var(--header-height));
  z-index: 10;
  top: var(--header-height);
  left: 0;
  box-shadow: var(--shadow-md);
}

@media (min-width: 768px) {
  .site-sidebar, #sidebar { 
    position: static; 
    transform: none; 
    box-shadow: none;
    top: auto;
  }
}

/* Mobile sidebar states */
.site-sidebar.translate-x-0, #sidebar.translate-x-0 {
  transform: translateX(0) !important;
}

.site-sidebar.-translate-x-full, #sidebar.-translate-x-full {
  transform: translateX(-100%) !important;
}

/* Sidebar item: icon + label on single row */
.sidebar-item{
  display:flex;
  align-items:center;
  gap:.75rem;
  padding:.75rem 1rem;
  color: var(--color-text);
  text-decoration:none;
  margin: 0 0.5rem;
  border-radius: var(--radius-base);
  transition: all 200ms ease;
  font-weight: 500;
}

.sidebar-item svg,.sidebar-item i{
  display:inline-flex;
  align-items:center;
  justify-content:center;
  flex-shrink:0;
  width:1.25rem;
  height:1.25rem;
  color: var(--color-text-secondary);
  transition: color 200ms ease;
}

.sidebar-item.active{
  background: linear-gradient(to right, rgba(67, 97, 238, 0.08), rgba(67, 97, 238, 0.04));
  color: var(--color-primary);
  font-weight: 600;
}

.sidebar-item.active svg, .sidebar-item.active i {
  color: var(--color-primary);
}

.sidebar-item:hover{
  background: rgba(67, 97, 238, 0.04);
  color: var(--color-primary);
  transform: translateX(2px);
}

.sidebar-item:hover svg, .sidebar-item:hover i {
  color: var(--color-primary);
}

.sidebar-item { 
  text-decoration: none !important; 
}

/* =========== Cards & Helpers =========== */
.card-hover{
  transition:transform .15s ease-out,box-shadow .15s ease-out;
}

.card-hover:hover{
  box-shadow: var(--shadow-md);
  transform:translateY(-2px);
}

.agent-card{
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  overflow:hidden;
  border:1px solid var(--color-border);
  transition:transform .15s ease,box-shadow .15s ease;
}

.agent-card-hover{
  background: var(--color-surface);
}

.agent-card-hover:hover{
  box-shadow: var(--shadow-md);
  transform:translateY(-4px);
}

.agent-card { 
  box-shadow: var(--shadow-sm); 
  transition: all 300ms ease-in-out; 
}

.agent-card-hover:hover { 
  box-shadow: 0 10px 24px rgba(67, 97, 238, 0.12); 
  transform: translateY(-4px); 
}

.card-actions{
  display:flex;
  gap:.5rem;
  justify-content:flex-end;
}

/* =========== Status indicators =========== */
.relative-pulse-wrapper{
  position:relative;
  display:inline-block;
  margin-right:.5rem;
}

.status-indicator{
  width:.5rem;
  height:.5rem;
  border-radius:9999px;
  display:inline-block;
}

.status-active-dot{
  background: var(--color-success);
  box-shadow:0 0 0 3px rgba(16,185,129,0.12);
  position:relative;
}

.status-inactive-dot{
  background: var(--color-text-secondary);
}

.status-active{
  background: rgba(16,185,129,0.08);
  color: #065f46;
}

.status-inactive{
  background: rgba(107,114,128,0.06);
  color: var(--color-text);
}

.status-template { 
  background: rgba(59, 130, 246, 0.08); 
  color: #1e40af; 
}

.status-indicator { 
  margin-right: 0.375rem; 
}

.relative-pulse-wrapper .status-indicator { 
  position: relative; 
  z-index: 2; 
}

.relative-pulse-wrapper::after { 
  content: ""; 
  position: absolute; 
  inset: 0; 
  border-radius: 9999px; 
  background: var(--color-success); 
  opacity: 0; 
  transition: opacity 300ms; 
}

.relative-pulse-wrapper:hover::after { 
  opacity: 0.2; 
}

/* =========== Modal & Forms =========== */
.modal-backdrop{
  position:fixed;
  inset:0;
  background:rgba(0,0,0,0.5);
  backdrop-filter:blur(6px);
  display:flex;
  align-items:center;
  justify-content:center;
  padding:1rem;
  z-index:50;
  opacity:0;
  pointer-events:none;
  transition:opacity .25s ease;
}

.modal-backdrop.active{
  opacity:1;
  pointer-events:auto;
}

.modal-container{
  background: var(--color-surface);
  border-radius: var(--radius-lg);
  box-shadow: var(--shadow-md);
  width:100%;
  max-width:28rem;
  transform:scale(.98);
  opacity:0;
  transition:all .25s ease;
}

.modal-backdrop.active .modal-container{
  transform:scale(1);
  opacity:1;
}

.form-input,.form-textarea{
  width:100%;
  padding:.75rem;
  border:1px solid var(--color-border);
  border-radius: var(--radius-base);
  background: var(--color-surface);
  box-shadow:0 0 #0000;
  transition:border-color .15s ease,box-shadow .15s ease;
  font-family: inherit;
}

.form-input:focus,.form-textarea:focus{
  outline:none;
  border-color: var(--color-primary);
  box-shadow:0 0 0 3px rgba(67,97,238,0.08);
}

.form-textarea{
  min-height:100px;
  resize:vertical;
}

/* =========== Radio group =========== */
.radio-group{
  display:block;
}

.radio-label{
  display:flex;
  align-items:center;
  cursor:pointer;
  gap:.75rem;
  padding: .5rem;
  border-radius: var(--radius-base);
  transition: background-color 150ms ease;
}

.radio-label:hover {
  background-color: rgba(67, 97, 238, 0.04);
}

.radio-custom{
  width:1.25rem;
  height:1.25rem;
  border-radius:9999px;
  border:2px solid var(--color-border);
  display:flex;
  align-items:center;
  justify-content:center;
  position:relative;
  transition:all .15s ease;
}

.radio-custom::after{
  content:"";
  width:.75rem;
  height:.75rem;
  border-radius:9999px;
  background: var(--color-primary);
  transform:scale(0);
  transition:transform .15s ease;
}

.radio-input:checked + .radio-custom{
  border-color: var(--color-primary);
}

.radio-input:checked + .radio-custom::after{
  transform:scale(1);
}

.ripple{
  position:absolute;
  inset:0;
  border-radius:9999px;
  opacity:0;
  pointer-events:none;
}

.radio-input:checked + .radio-custom .ripple{
  animation:ping 1.2s infinite;
  opacity:.5;
  background: var(--color-primary);
}

@keyframes ping{
  0%{transform:scale(1);opacity:.7}
  75%{transform:scale(1.4);opacity:.15}
  100%{transform:scale(1.6);opacity:0}
}

/* =========== Buttons =========== */
.btn{
  padding:.75rem 1rem;
  border-radius: var(--radius-base);
  border:1px solid transparent;
  font-size:.875rem;
  font-weight:500;
  cursor:pointer;
  transition: all 150ms ease;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.btn-secondary{
  background: var(--color-border);
  color: var(--color-text);
}

.btn-secondary:hover {
  background: var(--color-text-secondary);
  color: var(--color-surface);
}

.btn-primary{
  background: var(--color-primary);
  color: var(--color-surface);
}

.btn-primary:hover {
  background: var(--secondary);
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.btn-primary:disabled{
  background: var(--color-text-secondary);
  cursor:not-allowed;
  transform: none;
  box-shadow: none;
}

.create-button{
  background:linear-gradient(90deg, var(--color-primary), var(--secondary));
  color: var(--color-surface);
  padding:.75rem 1rem;
  border-radius: var(--radius-base);
  border:none;
  cursor:pointer;
  display:inline-flex;
  align-items:center;
  gap:.5rem;
  font-weight: 500;
  transition: all 150ms ease;
}

.create-button:hover{
  background: var(--secondary);
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.char-counter{
  font-size:.75rem;
  color: var(--color-text-secondary);
  opacity:0;
  transition:opacity .15s;
}

.char-counter.visible{
  opacity:1;
}

.draft-indicator{
  display:inline-flex;
  align-items:center;
  padding:.25rem .5rem;
  border-radius:9999px;
  background: rgba(59, 130, 246, 0.08);
  color:#1e3a8a;
  font-weight:500;
  font-size: .75rem;
}

/* =========== Enhanced table components =========== */
.card-actions { 
  display:flex; 
  justify-content:flex-end; 
  gap:0.5rem; 
  padding-top:0.75rem; 
  opacity:0; 
  transform: translateY(0.5rem); 
  transition: all 200ms ease-in-out; 
}

.agent-card-hover:hover .card-actions { 
  opacity:1; 
  transform: translateY(0); 
}

.table-row-hover { 
  transition-property: background-color; 
  transition-duration: 150ms; 
  transition-timing-function: ease-in-out; 
}

.table-row-hover:hover { 
  background-color: rgba(67, 97, 238, 0.02); 
}

.action-button { 
  padding: 0.5rem; 
  border-radius: var(--radius-base); 
  color: var(--color-text-secondary); 
  background-color: transparent; 
  transition: all 150ms ease; 
  border: none;
  cursor: pointer;
}

.action-button:hover { 
  background-color: var(--color-border); 
  color: var(--color-text); 
}

.action-cell { 
  display:flex; 
  gap:0.5rem; 
  opacity:0; 
  transition:opacity 150ms; 
  align-items:center; 
  justify-content:flex-end; 
}

.group:hover .action-cell { 
  opacity: 1; 
}

.action-cell > * { 
  transform: translateY(0.25rem); 
  transition: transform 150ms ease, opacity 150ms ease; 
}

.group:hover .action-cell > * { 
  transform: translateY(0); 
}

.action-cell > *:nth-child(1) { 
  transition-delay: 0ms; 
}

.action-cell > *:nth-child(2) { 
  transition-delay: 75ms; 
}

.action-cell > *:nth-child(3) { 
  transition-delay: 150ms; 
}

.status-badge { 
  display:inline-flex; 
  align-items:center; 
  padding:0.25rem 0.75rem; 
  border-radius:9999px; 
  font-size:.75rem; 
  font-weight:500; 
}

.status-completed { 
  background-color:rgba(16, 185, 129, 0.1); 
  color:#065f46; 
}

.status-processing { 
  background-color:rgba(245, 158, 11, 0.1); 
  color:#92400e; 
  position:relative; 
}

.status-processing::after { 
  content:""; 
  position:absolute; 
  inset:0; 
  border-radius:9999px; 
  background-color: rgba(245, 158, 11, 0.18); 
  opacity:0.7; 
  animation: ping 2s infinite; 
}

.status-upcoming { 
  background-color:rgba(59, 130, 246, 0.1); 
  color:#1e40af; 
}

.sort-header { 
  display:flex; 
  align-items:center; 
  cursor:pointer; 
  user-select:none; 
  padding: 0.5rem;
  border-radius: var(--radius-base);
  transition: background-color 150ms ease;
}

.sort-header:hover {
  background-color: rgba(67, 97, 238, 0.04);
}

.sort-indicator { 
  margin-left:.25rem; 
  transition:transform 200ms; 
  color: var(--color-text-secondary);
}

.sort-indicator.asc { 
  transform: rotate(180deg); 
}

/* =========== Enhanced utility classes =========== */
.hidden { 
  display: none !important; 
}

.text-primary {
  color: var(--color-primary) !important;
}

.text-secondary {
  color: var(--color-text-secondary) !important;
}

.bg-primary {
  background-color: var(--color-primary) !important;
}

.bg-surface {
  background-color: var(--color-surface) !important;
}

.border-primary {
  border-color: var(--color-primary) !important;
}

/* Enhanced focus states */
.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  :root {
    --background: #1f2937;
    --color-background: #1f2937;
    --color-surface: #374151;
    --color-text: #f9fafb;
    --color-text-secondary: #d1d5db;
    --color-border: #4b5563;
  }
}

/* End of enhanced stylesheet */
</file>

<file path="proto/upgrade.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shikshak - Upgrade Your Plan</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        'sans': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: '#4361ee',
                        secondary: '#3f37c9',
                        accent: '#4cc9f0',
                        background: '#f8f9fa',
                        text: '#212529',
                    }
                }
            }
        }
    </script>
    <!-- Heroicons for icons -->
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <style type="text/tailwindcss">
        @layer components {
            /* Main Layout */
            .upgrade-container {
                @apply flex flex-col h-screen bg-gray-50 p-4;
            }

            /* Modal-like Card */
            .upgrade-card {
                @apply bg-white rounded-xl shadow-lg overflow-hidden w-full max-w-4xl mx-auto flex flex-col;
            }

            /* Header */
            .upgrade-header {
                @apply bg-gradient-to-r from-primary to-secondary py-6 px-6 text-white;
            }
            .header-title {
                @apply text-2xl font-bold;
            }
            .header-subtitle {
                @apply mt-1 text-blue-100;
            }

            /* Body */
            .upgrade-body {
                @apply flex-1 overflow-y-auto p-6;
            }

            /* Usage Section */
            .usage-section {
                @apply mb-8;
            }
            .section-title {
                @apply text-lg font-semibold text-gray-900 mb-4;
            }
            .usage-bar-container {
                @apply mb-3 last:mb-0;
            }
            .usage-label {
                @apply flex justify-between text-sm text-gray-600 mb-1;
            }
            .usage-bar {
                @apply h-3 bg-gray-200 rounded-full overflow-hidden;
            }
            .usage-fill {
                @apply h-full rounded-full transition-all duration-1000 ease-out;
            }
            .usage-fill.normal {
                @apply bg-primary;
            }
            .usage-fill.warning {
                @apply bg-yellow-500;
            }
            .usage-fill.full {
                @apply bg-red-500;
            }

            /* Pricing Plans Section */
            .plans-section {
                @apply mb-8;
            }
            .plans-grid {
                @apply grid grid-cols-1 md:grid-cols-3 gap-6;
            }
            .plan-card {
                @apply border border-gray-200 rounded-lg p-5 relative transition-all duration-300 ease-in-out;
            }
            .plan-card.featured {
                @apply border-primary ring-2 ring-primary ring-opacity-20;
            }
            .plan-card:hover {
                @apply shadow-md -translate-y-1;
            }
            .plan-badge {
                @apply absolute top-0 right-0 bg-yellow-400 text-yellow-900 text-xs font-bold px-3 py-1 rounded-bl-lg;
            }
            .plan-badge.pulse {
                animation: badgePulse 2s infinite;
            }
            @keyframes badgePulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.5; }
            }
            .plan-name {
                @apply text-lg font-bold text-gray-900;
            }
            .plan-price {
                @apply mt-2 text-3xl font-bold text-gray-900 transition-all duration-300;
            }
            .plan-price-period {
                @apply text-base font-normal text-gray-600;
            }
            .plan-features {
                @apply mt-4 space-y-2;
            }
            .plan-feature {
                @apply flex items-start;
            }
            .plan-feature-icon {
                @apply flex-shrink-0 h-5 w-5 text-green-500 mt-0.5;
            }
            .plan-feature-text {
                @apply ml-2 text-sm text-gray-700;
            }
            .plan-feature-text.unavailable {
                @apply text-gray-400 line-through;
            }
            .plan-button {
                @apply mt-6 w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors duration-200;
            }
            .plan-button.current {
                @apply bg-gray-100 text-gray-700 cursor-default;
            }
            .plan-button.upgrade {
                @apply bg-primary text-white hover:bg-secondary focus:ring-primary;
            }

            /* Billing Section */
            .billing-section {
                @apply mb-6;
            }
            .billing-options {
                @apply flex items-center space-x-4 mb-4;
            }
            .billing-option {
                @apply flex items-center;
            }
            .billing-radio {
                @apply h-4 w-4 text-primary border-gray-300 focus:ring-primary;
            }
            .billing-label {
                @apply ml-2 block text-sm text-gray-700;
            }
            .savings-badge {
                @apply ml-2 px-2 py-0.5 bg-green-100 text-green-800 text-xs font-medium rounded-full;
            }
            .payment-methods {
                @apply flex flex-wrap gap-3 mt-2;
            }
            .payment-icon {
                @apply h-8 w-8 text-gray-500 transition-colors duration-200;
            }
            .payment-icon:hover {
                @apply text-gray-700 scale-105;
            }

            /* Footer */
            .upgrade-footer {
                @apply py-4 px-6 bg-gray-50 border-t border-gray-200 text-center text-sm text-gray-600;
            }
            .security-info {
                @apply flex items-center justify-center;
            }
            .security-icon {
                @apply h-4 w-4 text-green-500 mr-1.5;
            }

            /* Confetti Canvas (Placeholder) */
            #confetti-canvas {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 1000;
                display: none;
            }
        }
    </style>
</head>
<body class="bg-background font-sans">
    <!-- Confetti Canvas (Placeholder) -->
    <canvas id="confetti-canvas"></canvas>

    <!-- Demo Button to trigger modal -->
    <div class="upgrade-container items-center justify-center">
        <button id="open-upgrade-btn" class="px-4 py-2 bg-primary text-white rounded-lg hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary">
            Open Upgrade Modal
        </button>
    </div>

    <!-- Upgrade Your Plan Modal -->
    <div id="upgrade-modal" class="fixed inset-0 z-50 overflow-y-auto hidden p-4">
        <div class="flex items-center justify-center min-h-screen">
            <!-- Background overlay -->
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-black opacity-50"></div>
            </div>

            <div class="upgrade-card transform transition-all duration-300 ease-out scale-95 opacity-0">
                <!-- Header -->
                <div class="upgrade-header">
                    <h1 class="header-title">Upgrade Your Plan</h1>
                    <p class="header-subtitle">You've reached your monthly limit. Upgrade to continue using Meet AI</p>
                </div>

                <!-- Body -->
                <div class="upgrade-body">
                    <!-- Current Usage -->
                    <div class="usage-section">
                        <h2 class="section-title">Current Usage</h2>
                        <div class="usage-bar-container">
                            <div class="usage-label">
                                <span>Meetings</span>
                                <span>25/25</span>
                            </div>
                            <div class="usage-bar">
                                <div class="usage-fill full" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="usage-bar-container">
                            <div class="usage-label">
                                <span>Agents</span>
                                <span>8/8</span>
                            </div>
                            <div class="usage-bar">
                                <div class="usage-fill full" style="width: 100%;"></div>
                            </div>
                        </div>
                        <div class="usage-bar-container">
                            <div class="usage-label">
                                <span>Minutes</span>
                                <span>500/500</span>
                            </div>
                            <div class="usage-bar">
                                <div class="usage-fill full" style="width: 100%;"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Pricing Plans -->
                    <div class="plans-section">
                        <h2 class="section-title">Pricing Plans</h2>
                        <div class="plans-grid">
                            <!-- Free Plan -->
                            <div class="plan-card">
                                <h3 class="plan-name">FREE</h3>
                                <div class="plan-price">$0 <span class="plan-price-period">per month</span></div>
                                <ul class="plan-features">
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">25 meetings</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">8 agents</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">500 mins</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Basic summaries</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="x" class="plan-feature-icon text-gray-400"></i>
                                        <span class="plan-feature-text unavailable">AI Chat</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="x" class="plan-feature-icon text-gray-400"></i>
                                        <span class="plan-feature-text unavailable">Priority Support</span>
                                    </li>
                                </ul>
                                <button class="plan-button current">Current</button>
                            </div>

                            <!-- Basic Plan (Featured) -->
                            <div class="plan-card featured">
                                <div class="plan-badge pulse">POPULAR</div>
                                <h3 class="plan-name">BASIC</h3>
                                <div class="plan-price" id="basic-price">$19 <span class="plan-price-period">per month</span></div>
                                <ul class="plan-features">
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Unlimited meetings</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">50 agents</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">2000 mins</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Full transcripts</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">AI Chat</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Email Support</span>
                                    </li>
                                </ul>
                                <button class="plan-button upgrade">Upgrade Now</button>
                            </div>

                            <!-- Pro Plan -->
                            <div class="plan-card">
                                <div class="plan-badge">ADVANCED</div>
                                <h3 class="plan-name">PRO</h3>
                                <div class="plan-price" id="pro-price">$49 <span class="plan-price-period">per month</span></div>
                                <ul class="plan-features">
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Unlimited meetings</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Unlimited agents</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Unlimited mins</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Advanced AI</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">API Access</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Priority Support</span>
                                    </li>
                                    <li class="plan-feature">
                                        <i data-feather="check" class="plan-feature-icon"></i>
                                        <span class="plan-feature-text">Custom Integrations</span>
                                    </li>
                                </ul>
                                <button class="plan-button upgrade">Upgrade Now</button>
                            </div>
                        </div>
                    </div>

                    <!-- Billing Options -->
                    <div class="billing-section">
                        <h2 class="section-title">Billing Options</h2>
                        <div class="billing-options">
                            <div class="billing-option">
                                <input id="billing-monthly" name="billing" type="radio" class="billing-radio" value="monthly">
                                <label for="billing-monthly" class="billing-label">Monthly Billing</label>
                            </div>
                            <div class="billing-option">
                                <input id="billing-annual" name="billing" type="radio" class="billing-radio" value="annual" checked>
                                <label for="billing-annual" class="billing-label">
                                    Annual Billing <span class="savings-badge">Save 20%</span> 🎉
                                </label>
                            </div>
                        </div>
                        <div class="payment-methods">
                            <i data-feather="credit-card" class="payment-icon"></i>
                            <i data-feather="paypal" class="payment-icon"></i>
                            <i data-feather="smartphone" class="payment-icon"></i> <!-- Apple Pay -->
                            <i data-feather="chrome" class="payment-icon"></i> <!-- Google Pay -->
                        </div>
                    </div>
                </div>

                <!-- Footer -->
                <div class="upgrade-footer">
                    <div class="security-info">
                        <i data-feather="lock" class="security-icon"></i>
                        Secure checkout powered by Polar • 30-day money-back guarantee
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize Feather icons
        feather.replace();

        document.addEventListener('DOMContentLoaded', function () {
            // --- DOM Elements ---
            const openUpgradeBtn = document.getElementById('open-upgrade-btn');
            const upgradeModal = document.getElementById('upgrade-modal');
            const upgradeCard = upgradeModal.querySelector('.upgrade-card');
            const billingMonthly = document.getElementById('billing-monthly');
            const billingAnnual = document.getElementById('billing-annual');
            const basicPrice = document.getElementById('basic-price');
            const proPrice = document.getElementById('pro-price');
            const confettiCanvas = document.getElementById('confetti-canvas');

            // --- Open Modal ---
            openUpgradeBtn.addEventListener('click', () => {
                upgradeModal.classList.remove('hidden');
                // Trigger animation
                setTimeout(() => {
                    upgradeCard.classList.remove('scale-95', 'opacity-0');
                    upgradeCard.classList.add('scale-100', 'opacity-100');
                }, 10);
            });

            // --- Close Modal (Click outside or ESC key - simplified) ---
            upgradeModal.addEventListener('click', (e) => {
                if (e.target === upgradeModal) {
                    closeModal();
                }
            });
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape' && !upgradeModal.classList.contains('hidden')) {
                    closeModal();
                }
            });

            function closeModal() {
                upgradeCard.classList.remove('scale-100', 'opacity-100');
                upgradeCard.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    upgradeModal.classList.add('hidden');
                }, 300); // Match transition duration
            }

            // --- Billing Toggle & Price Update ---
            function updatePrices() {
                if (billingAnnual.checked) {
                    basicPrice.innerHTML = '$<span class="transition-all duration-300">182</span> <span class="plan-price-period">per year</span>'; // $19 * 12 * 0.8
                    proPrice.innerHTML = '$<span class="transition-all duration-300">470</span> <span class="plan-price-period">per year</span>';   // $49 * 12 * 0.8
                } else {
                    basicPrice.innerHTML = '$<span class="transition-all duration-300">19</span> <span class="plan-price-period">per month</span>';
                    proPrice.innerHTML = '$<span class="transition-all duration-300">49</span> <span class="plan-price-period">per month</span>';
                }
                // Re-initialize feather icons if price HTML changes significantly
                // feather.replace();
            }

            billingMonthly.addEventListener('change', updatePrices);
            billingAnnual.addEventListener('change', updatePrices);

            // --- Upgrade Button Simulation ---
            const upgradeButtons = document.querySelectorAll('.plan-button.upgrade');
            upgradeButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const planName = this.closest('.plan-card').querySelector('.plan-name').textContent;
                    alert(`Simulating upgrade to ${planName} plan...\nIn a real app, this would initiate the payment flow.`);

                    // Simulate success
                    setTimeout(() => {
                        // Show confetti
                        confettiCanvas.style.display = 'block';
                        // In a real app, you'd use a confetti library here
                        console.log("Confetti animation would play here");
                        setTimeout(() => {
                            confettiCanvas.style.display = 'none';
                            closeModal();
                            alert(`Success! Your ${planName} plan is now active.`);
                        }, 2000); // Show confetti for 2 seconds
                    }, 1000); // Simulate 1 second processing
                });
            });

        });
    </script>
</body>
</html>
</file>

<file path="userflow-V1.txt">
Okay, here is a detailed user flow based on the PRD and the UI/UX specifications we've discussed for the screens:

**Overall User Flow: Teacher Hosts a Live Session with AI Co-host**

This flow covers the core experience from a teacher's perspective, incorporating the UI elements and interactions prototyped.

1.  **Authentication & Dashboard Access:**
    *   **User Action:** Teacher navigates to the Shikshak platform.
    *   **System Response:** Displays the login/signup page (not prototyped but implied by PRD).
    *   **User Action:** Teacher logs in.
    *   **System Response:** Redirects to the Teacher Dashboard (`dashboard.html`).
    *   **UI Experience (Dashboard):**
        *   Clean, organized layout with a navigation sidebar (Dashboard, Meetings, Agents, Analytics, Settings).
        *   Responsive design: Sidebar collapses into a hamburger menu on mobile.
        *   Overview cards show quick stats (Meetings, Active Agents, Usage).
        *   Recent Meetings list provides quick access.
        *   Consistent branding (logo, Pro badge) and user profile controls in the top navbar.

2.  **Navigate to Meetings or Create a New Session:**
    *   **User Action:** Teacher clicks on the "Meetings" link in the sidebar.
    *   **System Response:** Displays the Meetings page (`meetings.html`).
    *   **UI Experience (Meetings Page):**
        *   Clear header with "Meetings" title and prominent "+ New Meeting" button.
        *   Filter bar allows searching and sorting meetings.
        *   Data table lists existing meetings with status, agent, date, and action buttons.
        *   Smooth interactions: hover effects on rows, animated sort indicators, responsive pagination.
        *   **Alternative:** Teacher might click "+ New Meeting" directly from the Dashboard header or the Meetings page header.

3.  **Create a New Meeting:**
    *   **User Action:** Teacher clicks the "+ New Meeting" button.
    *   **System Response:** Opens the "Create New Meeting" modal (`create-meeting.html`).
    *   **UI Experience (Create Meeting Modal):**
        *   Modal slides in smoothly with a backdrop blur.
        *   Form fields for Meeting Name, Agent selection (rich dropdown preview), Meeting Type, and Description.
        *   Real-time validation with inline error messages that slide into view.
        *   Dynamic "Agent Preview" updates when an agent is selected.
        *   Auto-suggestion for meeting name based on selected agent.
        *   Character counter for description.
        *   "Create Meeting" button is disabled until required fields are filled.
        *   Pressing Enter in the name field can trigger submission if valid.

4.  **Enter the Video Call Lobby:**
    *   **User Action:** Teacher submits the "Create New Meeting" form.
    *   **System Response:** Creates the session and redirects to the Video Call Lobby (`video-call-lobby.html`) for the new session.
    *   **UI Experience (Video Call Lobby):**
        *   Simulated browser permission prompt appears first.
        *   Once permissions are granted, the lobby loads.
        *   Split layout: Left side shows Camera Preview and Agent Preview; Right side shows Setup Panel.
        *   Camera preview area has a placeholder or simulated video feed.
        *   Device toggle buttons (Mute, Stop Video) provide clear visual feedback (e.g., color change when active).
        *   Setup panel shows device status (simulated loading for camera), meeting details (agent, recording status), and connection quality.
        *   Agent preview includes a subtle breathing animation on the avatar.
        *   The prominent "Join Call" button pulses gently to encourage action when ready.

5.  **Join the Live Session:**
    *   **User Action:** Teacher clicks the "Join Call" button.
    *   **System Response:** Initiates the WebRTC connection, connects to the SFU room, and enters the live session view (`live-session.html`).
    *   **UI Experience (Live Session):**
        *   Immersive full-screen interface.
        *   Top header shows recording status, meeting title, and timer.
        *   Main video area displays participant videos (user and AI agent) in a grid. Active speakers have a visual glow.
        *   If AI is enabled (as set in the previous step), a consent banner might appear briefly or be assumed handled.
        *   Live Transcript panel scrolls automatically, showing recent speaker turns with fade-in animations.
        *   Bottom control bar provides essential actions (Mute, Camera, Chat, Notes, Present Screen, End Call).
        *   **Chat Interaction:** Clicking `[💬]` slides the Chat panel from the left. Users can type messages, send with Enter/Click, and see messages appear with sender distinction. File upload button available.
        *   **Notes Interaction:** Clicking `[📋]` slides the Notes panel from the right and reveals a floating "+" button. Clicking "+" allows adding timestamped notes.
        *   **Screen Sharing:** Clicking `[◽]` (Present) simulates sharing the screen, changing the layout.
        *   **AI Interaction (Implicit):** The AI agent video might show a waveform animation when "speaking". The live transcript will include AI responses. The AI chat panel (accessed via control bar or notes) would be available for private queries.

6.  **During the Live Session (Key Interactions):**
    *   **Sharing Content:** Teacher uses the "Present" button to share their screen. Layout adjusts dynamically.
    *   **Interacting via Chat:** Participants (including the teacher) use the chat panel to ask questions or make comments. The AI might monitor this.
    *   **Asking AI Questions:** Students/Teacher ask questions directed at the AI (voice or text in chat). The AI processes input (STT, sampled frames, chat) and responds via TTS (played in session) and text in the chat/transcript.
    *   **Taking Notes:** Teacher clicks the floating "+" note button to add quick thoughts linked to the current timestamp.
    *   **Controlling Media:** Teacher toggles mute/camera as needed.

7.  **End the Live Session:**
    *   **User Action:** Teacher clicks the "End" button (`[📞]`) in the control bar or header.
    *   **System Response:** Prompts for confirmation. If confirmed, ends the session for all participants and redirects to the Post-Call Experience.

8.  **Post-Call Experience:**
    *   **System Response:** Displays the Post-Call Experience page (`post-call-experience.html`).
    *   **UI Experience (Post-Call):**
        *   Header summarizes the session (status, duration, processing time).
        *   Tab navigation (`[📝 Summary]`, `[📜 Transcript]`, `[🎥 Recording]`, `[💬 AI Chat]`) allows switching views.
        *   Smooth slide/fade transitions occur when switching tabs.
        *   **Summary Tab:**
            *   Key Insights listed.
            *   Interactive Action Items with checkboxes that animate when completed.
            *   Main Topics with clickable timestamps that jump to the Transcript.
            *   Agent Performance ratings with hover effects.
        *   **Transcript Tab:**
            *   Scrollable list of conversation turns with timestamps and speaker identification.
            *   Provides a detailed record of the session.
        *   **Recording/Chat Tabs:** Placeholders indicating availability/access.

9.  **(Optional) Interacting with AI Artifacts Post-Session:**
    *   **User Action:** Teacher might navigate to the AI Meeting Assistant (e.g., via the `[💬 AI Chat]` tab or a direct link).
    *   **System Response:** Opens the AI Assistant interface (`ai-meeting-assistant.html`).
    *   **UI Experience (AI Assistant):**
        *   Chat-style interface within the session context.
        *   Message bubbles slide in smoothly from the correct side (user/AI).
        *   AI messages are formatted (bold, lists) and may contain links (e.g., to transcript timestamps).
        *   Hovering over messages reveals a copy button.
        *   Textarea for asking new questions auto-resizes.
        *   A typing indicator shows when the AI is "thinking".
        *   Allows asking follow-up questions about the session content.

10. **(Optional) Reviewing Transcript Details:**
    *   **User Action:** Teacher navigates to the full Transcript view (e.g., via the `[📜 Transcript]` tab or a direct link).
    *   **System Response:** Displays the detailed Transcript page (`meeting-transcript.html`).
    *   **UI Experience (Transcript):**
    *   Dedicated page for searching and reviewing the transcript.
    *   Search bar highlights matching terms with a fade-in animation.
    *   Search results bar appears, offering "Jump to" links for specific timestamps with smooth scrolling and a brief highlight pulse.
    *   Speakers are clearly identified with color-coded names/avatars.
    *   Timestamps are clickable (functionality simulated).
    *   A subtle progress bar indicates reading position.

This flow integrates the specific UI/UX details like animations, interactions, component behaviors, and the overall structure defined for each screen prototype, aligning with the core functionalities outlined in the PRD for the live session with AI co-host experience.
</file>

</files>
